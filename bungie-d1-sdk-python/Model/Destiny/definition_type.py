# coding: utf-8

"""
    Unofficial Bungie.net API for Destiny 1

    These are legacy endpoints for Destiny 1 that are no longer supported officially by Bungie.  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: lowlines89@gmail.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class DefinitionType(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    allowed enum values
    """
    DEFINITION_TYPE__0 = "0"
    DEFINITION_TYPE__1 = "1"
    DEFINITION_TYPE__2 = "2"
    DEFINITION_TYPE__3 = "3"
    DEFINITION_TYPE__4 = "4"
    DEFINITION_TYPE__5 = "5"
    DEFINITION_TYPE__6 = "6"
    DEFINITION_TYPE__7 = "7"
    DEFINITION_TYPE__8 = "8"
    DEFINITION_TYPE__9 = "9"
    DEFINITION_TYPE__10 = "10"
    DEFINITION_TYPE__11 = "11"
    DEFINITION_TYPE__12 = "12"
    DEFINITION_TYPE__13 = "13"
    DEFINITION_TYPE__14 = "14"
    DEFINITION_TYPE__15 = "15"
    DEFINITION_TYPE__16 = "16"
    DEFINITION_TYPE__17 = "17"
    DEFINITION_TYPE__18 = "18"
    DEFINITION_TYPE__19 = "19"
    DEFINITION_TYPE__20 = "20"
    DEFINITION_TYPE__21 = "21"
    DEFINITION_TYPE__22 = "22"
    DEFINITION_TYPE__23 = "23"

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
    }

    attribute_map = {
    }

    def __init__(self):  # noqa: E501
        """DefinitionType - a model defined in OpenAPI"""  # noqa: E501
        self.discriminator = None

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DefinitionType):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
