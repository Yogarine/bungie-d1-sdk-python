# coding: utf-8

"""
    Unofficial Bungie.net API for Destiny 1

    These are legacy endpoints for Destiny 1 that are no longer supported officially by Bungie.  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: lowlines89@gmail.com
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from bungie-d1-sdk-python.api_client import ApiClient


class UnofficialApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def equip_item(self, **kwargs):  # noqa: E501
        """equip_item  # noqa: E501

        Equips an item from a character's inventory. The endpoint will fail if the character is logged in and doing an activity.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.equip_item(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param inline_object_1 inline_object1:
        :return: InlineResponse2004
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.equip_item_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.equip_item_with_http_info(**kwargs)  # noqa: E501
            return data

    def equip_item_with_http_info(self, **kwargs):  # noqa: E501
        """equip_item  # noqa: E501

        Equips an item from a character's inventory. The endpoint will fail if the character is logged in and doing an activity.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.equip_item_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param inline_object_1 inline_object1:
        :return: InlineResponse2004
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['inline_object1']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method equip_item" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'inline_object1' in local_var_params:
            body_params = local_var_params['inline_object1']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/Destiny/EquipItem/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2004',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def equip_items(self, **kwargs):  # noqa: E501
        """equip_items  # noqa: E501

        Equips multiple items from a character's inventory and returns the updated inventory and character information. The endpoint will fail if the character is logged in and doing an activity.  **Note:** This is an [experimental endpoint](https://www.bungie.net/en/Clan/Post/39966/187691777/1) that was accidentally left in. While it should work as intended, it may return [incorrect response data and has a higher bandwidth](https://www.bungie.net/en/Clan/Post/39966/196303703/0/0) than simply making multiple [[EquipItem]] requests.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.equip_items(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param inline_object_2 inline_object2:
        :return: InlineResponse2005
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.equip_items_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.equip_items_with_http_info(**kwargs)  # noqa: E501
            return data

    def equip_items_with_http_info(self, **kwargs):  # noqa: E501
        """equip_items  # noqa: E501

        Equips multiple items from a character's inventory and returns the updated inventory and character information. The endpoint will fail if the character is logged in and doing an activity.  **Note:** This is an [experimental endpoint](https://www.bungie.net/en/Clan/Post/39966/187691777/1) that was accidentally left in. While it should work as intended, it may return [incorrect response data and has a higher bandwidth](https://www.bungie.net/en/Clan/Post/39966/196303703/0/0) than simply making multiple [[EquipItem]] requests.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.equip_items_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param inline_object_2 inline_object2:
        :return: InlineResponse2005
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['inline_object2']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method equip_items" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'inline_object2' in local_var_params:
            body_params = local_var_params['inline_object2']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/Destiny/EquipItems/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2005',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_account(self, membership_type, destiny_membership_id, **kwargs):  # noqa: E501
        """get_account  # noqa: E501

        Returns Destiny account information for the supplied membership.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_account(membership_type, destiny_membership_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BungieMembershipType membership_type: The type of account for which info will be extracted. (required)
        :param int destiny_membership_id: Destiny membership ID. (required)
        :param bool definitions: Include definitions in the response. Use while testing.
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_account_with_http_info(membership_type, destiny_membership_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_account_with_http_info(membership_type, destiny_membership_id, **kwargs)  # noqa: E501
            return data

    def get_account_with_http_info(self, membership_type, destiny_membership_id, **kwargs):  # noqa: E501
        """get_account  # noqa: E501

        Returns Destiny account information for the supplied membership.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_account_with_http_info(membership_type, destiny_membership_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BungieMembershipType membership_type: The type of account for which info will be extracted. (required)
        :param int destiny_membership_id: Destiny membership ID. (required)
        :param bool definitions: Include definitions in the response. Use while testing.
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['membership_type', 'destiny_membership_id', 'definitions']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_account" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'membership_type' is set
        if ('membership_type' not in local_var_params or
                local_var_params['membership_type'] is None):
            raise ValueError("Missing the required parameter `membership_type` when calling `get_account`")  # noqa: E501
        # verify the required parameter 'destiny_membership_id' is set
        if ('destiny_membership_id' not in local_var_params or
                local_var_params['destiny_membership_id'] is None):
            raise ValueError("Missing the required parameter `destiny_membership_id` when calling `get_account`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'membership_type' in local_var_params:
            path_params['membershipType'] = local_var_params['membership_type']  # noqa: E501
        if 'destiny_membership_id' in local_var_params:
            path_params['destinyMembershipId'] = local_var_params['destiny_membership_id']  # noqa: E501

        query_params = []
        if 'definitions' in local_var_params:
            query_params.append(('definitions', local_var_params['definitions']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/Destiny/{membershipType}/Account/{destinyMembershipId}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_account_summary(self, membership_type, destiny_membership_id, **kwargs):  # noqa: E501
        """get_account_summary  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_account_summary(membership_type, destiny_membership_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BungieMembershipType membership_type: The type of account for which info will be extracted. (required)
        :param int destiny_membership_id: Destiny membership ID. (required)
        :param bool definitions: Include definitions in the response. Use while testing.
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_account_summary_with_http_info(membership_type, destiny_membership_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_account_summary_with_http_info(membership_type, destiny_membership_id, **kwargs)  # noqa: E501
            return data

    def get_account_summary_with_http_info(self, membership_type, destiny_membership_id, **kwargs):  # noqa: E501
        """get_account_summary  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_account_summary_with_http_info(membership_type, destiny_membership_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BungieMembershipType membership_type: The type of account for which info will be extracted. (required)
        :param int destiny_membership_id: Destiny membership ID. (required)
        :param bool definitions: Include definitions in the response. Use while testing.
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['membership_type', 'destiny_membership_id', 'definitions']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_account_summary" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'membership_type' is set
        if ('membership_type' not in local_var_params or
                local_var_params['membership_type'] is None):
            raise ValueError("Missing the required parameter `membership_type` when calling `get_account_summary`")  # noqa: E501
        # verify the required parameter 'destiny_membership_id' is set
        if ('destiny_membership_id' not in local_var_params or
                local_var_params['destiny_membership_id'] is None):
            raise ValueError("Missing the required parameter `destiny_membership_id` when calling `get_account_summary`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'membership_type' in local_var_params:
            path_params['membershipType'] = local_var_params['membership_type']  # noqa: E501
        if 'destiny_membership_id' in local_var_params:
            path_params['destinyMembershipId'] = local_var_params['destiny_membership_id']  # noqa: E501

        query_params = []
        if 'definitions' in local_var_params:
            query_params.append(('definitions', local_var_params['definitions']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/Destiny/{membershipType}/Account/{destinyMembershipId}/Summary/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_activity_blob(self, param1, **kwargs):  # noqa: E501
        """get_activity_blob  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_activity_blob(param1, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str param1: (required)
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_activity_blob_with_http_info(param1, **kwargs)  # noqa: E501
        else:
            (data) = self.get_activity_blob_with_http_info(param1, **kwargs)  # noqa: E501
            return data

    def get_activity_blob_with_http_info(self, param1, **kwargs):  # noqa: E501
        """get_activity_blob  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_activity_blob_with_http_info(param1, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str param1: (required)
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['param1']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_activity_blob" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'param1' is set
        if ('param1' not in local_var_params or
                local_var_params['param1'] is None):
            raise ValueError("Missing the required parameter `param1` when calling `get_activity_blob`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'param1' in local_var_params:
            path_params['param1'] = local_var_params['param1']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/Destiny/Stats/ActivityBlob/{param1}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_activity_history(self, membership_type, destiny_membership_id, character_id, **kwargs):  # noqa: E501
        """get_activity_history  # noqa: E501

        Returns recent activity history for a given character.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_activity_history(membership_type, destiny_membership_id, character_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BungieMembershipType membership_type: The type of account for which info will be extracted. (required)
        :param int destiny_membership_id: Destiny membership ID. (required)
        :param str character_id: (required)
        :param ActivityModeType mode: Game mode to return. Required.
        :param int count: The number of results to return.
        :param int page: The current page to return. Starts at 1.
        :param bool definitions: Include definitions in the response. Use while testing.
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_activity_history_with_http_info(membership_type, destiny_membership_id, character_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_activity_history_with_http_info(membership_type, destiny_membership_id, character_id, **kwargs)  # noqa: E501
            return data

    def get_activity_history_with_http_info(self, membership_type, destiny_membership_id, character_id, **kwargs):  # noqa: E501
        """get_activity_history  # noqa: E501

        Returns recent activity history for a given character.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_activity_history_with_http_info(membership_type, destiny_membership_id, character_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BungieMembershipType membership_type: The type of account for which info will be extracted. (required)
        :param int destiny_membership_id: Destiny membership ID. (required)
        :param str character_id: (required)
        :param ActivityModeType mode: Game mode to return. Required.
        :param int count: The number of results to return.
        :param int page: The current page to return. Starts at 1.
        :param bool definitions: Include definitions in the response. Use while testing.
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['membership_type', 'destiny_membership_id', 'character_id', 'mode', 'count', 'page', 'definitions']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_activity_history" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'membership_type' is set
        if ('membership_type' not in local_var_params or
                local_var_params['membership_type'] is None):
            raise ValueError("Missing the required parameter `membership_type` when calling `get_activity_history`")  # noqa: E501
        # verify the required parameter 'destiny_membership_id' is set
        if ('destiny_membership_id' not in local_var_params or
                local_var_params['destiny_membership_id'] is None):
            raise ValueError("Missing the required parameter `destiny_membership_id` when calling `get_activity_history`")  # noqa: E501
        # verify the required parameter 'character_id' is set
        if ('character_id' not in local_var_params or
                local_var_params['character_id'] is None):
            raise ValueError("Missing the required parameter `character_id` when calling `get_activity_history`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'membership_type' in local_var_params:
            path_params['membershipType'] = local_var_params['membership_type']  # noqa: E501
        if 'destiny_membership_id' in local_var_params:
            path_params['destinyMembershipId'] = local_var_params['destiny_membership_id']  # noqa: E501
        if 'character_id' in local_var_params:
            path_params['characterId'] = local_var_params['character_id']  # noqa: E501

        query_params = []
        if 'mode' in local_var_params:
            query_params.append(('mode', local_var_params['mode']))  # noqa: E501
        if 'count' in local_var_params:
            query_params.append(('count', local_var_params['count']))  # noqa: E501
        if 'page' in local_var_params:
            query_params.append(('page', local_var_params['page']))  # noqa: E501
        if 'definitions' in local_var_params:
            query_params.append(('definitions', local_var_params['definitions']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/Destiny/Stats/ActivityHistory/{membershipType}/{destinyMembershipId}/{characterId}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_advisors_for_account(self, membership_type, destiny_membership_id, **kwargs):  # noqa: E501
        """get_advisors_for_account  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_advisors_for_account(membership_type, destiny_membership_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BungieMembershipType membership_type: The type of account for which info will be extracted. (required)
        :param int destiny_membership_id: Destiny membership ID. (required)
        :param bool definitions: Include definitions in the response. Use while testing.
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_advisors_for_account_with_http_info(membership_type, destiny_membership_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_advisors_for_account_with_http_info(membership_type, destiny_membership_id, **kwargs)  # noqa: E501
            return data

    def get_advisors_for_account_with_http_info(self, membership_type, destiny_membership_id, **kwargs):  # noqa: E501
        """get_advisors_for_account  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_advisors_for_account_with_http_info(membership_type, destiny_membership_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BungieMembershipType membership_type: The type of account for which info will be extracted. (required)
        :param int destiny_membership_id: Destiny membership ID. (required)
        :param bool definitions: Include definitions in the response. Use while testing.
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['membership_type', 'destiny_membership_id', 'definitions']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_advisors_for_account" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'membership_type' is set
        if ('membership_type' not in local_var_params or
                local_var_params['membership_type'] is None):
            raise ValueError("Missing the required parameter `membership_type` when calling `get_advisors_for_account`")  # noqa: E501
        # verify the required parameter 'destiny_membership_id' is set
        if ('destiny_membership_id' not in local_var_params or
                local_var_params['destiny_membership_id'] is None):
            raise ValueError("Missing the required parameter `destiny_membership_id` when calling `get_advisors_for_account`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'membership_type' in local_var_params:
            path_params['membershipType'] = local_var_params['membership_type']  # noqa: E501
        if 'destiny_membership_id' in local_var_params:
            path_params['destinyMembershipId'] = local_var_params['destiny_membership_id']  # noqa: E501

        query_params = []
        if 'definitions' in local_var_params:
            query_params.append(('definitions', local_var_params['definitions']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/Destiny/{membershipType}/Account/{destinyMembershipId}/Advisors/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_advisors_for_character(self, membership_type, destiny_membership_id, character_id, **kwargs):  # noqa: E501
        """get_advisors_for_character  # noqa: E501

        Returns advisor information about a given character.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_advisors_for_character(membership_type, destiny_membership_id, character_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BungieMembershipType membership_type: The type of account for which info will be extracted. (required)
        :param int destiny_membership_id: Destiny membership ID. (required)
        :param str character_id: (required)
        :param bool definitions: Include definitions in the response. Use while testing.
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_advisors_for_character_with_http_info(membership_type, destiny_membership_id, character_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_advisors_for_character_with_http_info(membership_type, destiny_membership_id, character_id, **kwargs)  # noqa: E501
            return data

    def get_advisors_for_character_with_http_info(self, membership_type, destiny_membership_id, character_id, **kwargs):  # noqa: E501
        """get_advisors_for_character  # noqa: E501

        Returns advisor information about a given character.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_advisors_for_character_with_http_info(membership_type, destiny_membership_id, character_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BungieMembershipType membership_type: The type of account for which info will be extracted. (required)
        :param int destiny_membership_id: Destiny membership ID. (required)
        :param str character_id: (required)
        :param bool definitions: Include definitions in the response. Use while testing.
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['membership_type', 'destiny_membership_id', 'character_id', 'definitions']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_advisors_for_character" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'membership_type' is set
        if ('membership_type' not in local_var_params or
                local_var_params['membership_type'] is None):
            raise ValueError("Missing the required parameter `membership_type` when calling `get_advisors_for_character`")  # noqa: E501
        # verify the required parameter 'destiny_membership_id' is set
        if ('destiny_membership_id' not in local_var_params or
                local_var_params['destiny_membership_id'] is None):
            raise ValueError("Missing the required parameter `destiny_membership_id` when calling `get_advisors_for_character`")  # noqa: E501
        # verify the required parameter 'character_id' is set
        if ('character_id' not in local_var_params or
                local_var_params['character_id'] is None):
            raise ValueError("Missing the required parameter `character_id` when calling `get_advisors_for_character`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'membership_type' in local_var_params:
            path_params['membershipType'] = local_var_params['membership_type']  # noqa: E501
        if 'destiny_membership_id' in local_var_params:
            path_params['destinyMembershipId'] = local_var_params['destiny_membership_id']  # noqa: E501
        if 'character_id' in local_var_params:
            path_params['characterId'] = local_var_params['character_id']  # noqa: E501

        query_params = []
        if 'definitions' in local_var_params:
            query_params.append(('definitions', local_var_params['definitions']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/Destiny/{membershipType}/Account/{destinyMembershipId}/Character/{characterId}/Advisors/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_advisors_for_character_v2(self, membership_type, destiny_membership_id, character_id, **kwargs):  # noqa: E501
        """get_advisors_for_character_v2  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_advisors_for_character_v2(membership_type, destiny_membership_id, character_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BungieMembershipType membership_type: The type of account for which info will be extracted. (required)
        :param int destiny_membership_id: Destiny membership ID. (required)
        :param str character_id: (required)
        :param bool definitions: Include definitions in the response. Use while testing.
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_advisors_for_character_v2_with_http_info(membership_type, destiny_membership_id, character_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_advisors_for_character_v2_with_http_info(membership_type, destiny_membership_id, character_id, **kwargs)  # noqa: E501
            return data

    def get_advisors_for_character_v2_with_http_info(self, membership_type, destiny_membership_id, character_id, **kwargs):  # noqa: E501
        """get_advisors_for_character_v2  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_advisors_for_character_v2_with_http_info(membership_type, destiny_membership_id, character_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BungieMembershipType membership_type: The type of account for which info will be extracted. (required)
        :param int destiny_membership_id: Destiny membership ID. (required)
        :param str character_id: (required)
        :param bool definitions: Include definitions in the response. Use while testing.
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['membership_type', 'destiny_membership_id', 'character_id', 'definitions']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_advisors_for_character_v2" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'membership_type' is set
        if ('membership_type' not in local_var_params or
                local_var_params['membership_type'] is None):
            raise ValueError("Missing the required parameter `membership_type` when calling `get_advisors_for_character_v2`")  # noqa: E501
        # verify the required parameter 'destiny_membership_id' is set
        if ('destiny_membership_id' not in local_var_params or
                local_var_params['destiny_membership_id'] is None):
            raise ValueError("Missing the required parameter `destiny_membership_id` when calling `get_advisors_for_character_v2`")  # noqa: E501
        # verify the required parameter 'character_id' is set
        if ('character_id' not in local_var_params or
                local_var_params['character_id'] is None):
            raise ValueError("Missing the required parameter `character_id` when calling `get_advisors_for_character_v2`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'membership_type' in local_var_params:
            path_params['membershipType'] = local_var_params['membership_type']  # noqa: E501
        if 'destiny_membership_id' in local_var_params:
            path_params['destinyMembershipId'] = local_var_params['destiny_membership_id']  # noqa: E501
        if 'character_id' in local_var_params:
            path_params['characterId'] = local_var_params['character_id']  # noqa: E501

        query_params = []
        if 'definitions' in local_var_params:
            query_params.append(('definitions', local_var_params['definitions']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/Destiny/{membershipType}/Account/{destinyMembershipId}/Character/{characterId}/Advisors/V2/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_advisors_for_current_character(self, membership_type, character_id, **kwargs):  # noqa: E501
        """get_advisors_for_current_character  # noqa: E501

        Returns advisor information about a given character.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_advisors_for_current_character(membership_type, character_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BungieMembershipType membership_type: The type of account for which info will be extracted. (required)
        :param str character_id: (required)
        :param bool definitions: Include definitions in the response. Use while testing.
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_advisors_for_current_character_with_http_info(membership_type, character_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_advisors_for_current_character_with_http_info(membership_type, character_id, **kwargs)  # noqa: E501
            return data

    def get_advisors_for_current_character_with_http_info(self, membership_type, character_id, **kwargs):  # noqa: E501
        """get_advisors_for_current_character  # noqa: E501

        Returns advisor information about a given character.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_advisors_for_current_character_with_http_info(membership_type, character_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BungieMembershipType membership_type: The type of account for which info will be extracted. (required)
        :param str character_id: (required)
        :param bool definitions: Include definitions in the response. Use while testing.
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['membership_type', 'character_id', 'definitions']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_advisors_for_current_character" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'membership_type' is set
        if ('membership_type' not in local_var_params or
                local_var_params['membership_type'] is None):
            raise ValueError("Missing the required parameter `membership_type` when calling `get_advisors_for_current_character`")  # noqa: E501
        # verify the required parameter 'character_id' is set
        if ('character_id' not in local_var_params or
                local_var_params['character_id'] is None):
            raise ValueError("Missing the required parameter `character_id` when calling `get_advisors_for_current_character`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'membership_type' in local_var_params:
            path_params['membershipType'] = local_var_params['membership_type']  # noqa: E501
        if 'character_id' in local_var_params:
            path_params['characterId'] = local_var_params['character_id']  # noqa: E501

        query_params = []
        if 'definitions' in local_var_params:
            query_params.append(('definitions', local_var_params['definitions']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/Destiny/{membershipType}/MyAccount/Character/{characterId}/Advisors/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_items_summary(self, membership_type, destiny_membership_id, **kwargs):  # noqa: E501
        """get_all_items_summary  # noqa: E501

        Returns all items for a given account.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_items_summary(membership_type, destiny_membership_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BungieMembershipType membership_type: The type of account for which info will be extracted. (required)
        :param int destiny_membership_id: Destiny membership ID. (required)
        :param bool definitions: Include definitions in the response. Use while testing.
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_all_items_summary_with_http_info(membership_type, destiny_membership_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_all_items_summary_with_http_info(membership_type, destiny_membership_id, **kwargs)  # noqa: E501
            return data

    def get_all_items_summary_with_http_info(self, membership_type, destiny_membership_id, **kwargs):  # noqa: E501
        """get_all_items_summary  # noqa: E501

        Returns all items for a given account.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_items_summary_with_http_info(membership_type, destiny_membership_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BungieMembershipType membership_type: The type of account for which info will be extracted. (required)
        :param int destiny_membership_id: Destiny membership ID. (required)
        :param bool definitions: Include definitions in the response. Use while testing.
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['membership_type', 'destiny_membership_id', 'definitions']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_items_summary" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'membership_type' is set
        if ('membership_type' not in local_var_params or
                local_var_params['membership_type'] is None):
            raise ValueError("Missing the required parameter `membership_type` when calling `get_all_items_summary`")  # noqa: E501
        # verify the required parameter 'destiny_membership_id' is set
        if ('destiny_membership_id' not in local_var_params or
                local_var_params['destiny_membership_id'] is None):
            raise ValueError("Missing the required parameter `destiny_membership_id` when calling `get_all_items_summary`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'membership_type' in local_var_params:
            path_params['membershipType'] = local_var_params['membership_type']  # noqa: E501
        if 'destiny_membership_id' in local_var_params:
            path_params['destinyMembershipId'] = local_var_params['destiny_membership_id']  # noqa: E501

        query_params = []
        if 'definitions' in local_var_params:
            query_params.append(('definitions', local_var_params['definitions']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/Destiny/{membershipType}/Account/{destinyMembershipId}/Items/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_vendors_for_current_character(self, membership_type, character_id, **kwargs):  # noqa: E501
        """get_all_vendors_for_current_character  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_vendors_for_current_character(membership_type, character_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BungieMembershipType membership_type: The type of account for which info will be extracted. (required)
        :param str character_id: (required)
        :param bool definitions: Include definitions in the response. Use while testing.
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_all_vendors_for_current_character_with_http_info(membership_type, character_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_all_vendors_for_current_character_with_http_info(membership_type, character_id, **kwargs)  # noqa: E501
            return data

    def get_all_vendors_for_current_character_with_http_info(self, membership_type, character_id, **kwargs):  # noqa: E501
        """get_all_vendors_for_current_character  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_vendors_for_current_character_with_http_info(membership_type, character_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BungieMembershipType membership_type: The type of account for which info will be extracted. (required)
        :param str character_id: (required)
        :param bool definitions: Include definitions in the response. Use while testing.
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['membership_type', 'character_id', 'definitions']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_vendors_for_current_character" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'membership_type' is set
        if ('membership_type' not in local_var_params or
                local_var_params['membership_type'] is None):
            raise ValueError("Missing the required parameter `membership_type` when calling `get_all_vendors_for_current_character`")  # noqa: E501
        # verify the required parameter 'character_id' is set
        if ('character_id' not in local_var_params or
                local_var_params['character_id'] is None):
            raise ValueError("Missing the required parameter `character_id` when calling `get_all_vendors_for_current_character`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'membership_type' in local_var_params:
            path_params['membershipType'] = local_var_params['membership_type']  # noqa: E501
        if 'character_id' in local_var_params:
            path_params['characterId'] = local_var_params['character_id']  # noqa: E501

        query_params = []
        if 'definitions' in local_var_params:
            query_params.append(('definitions', local_var_params['definitions']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/Destiny/{membershipType}/MyAccount/Character/{characterId}/Vendors/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_bond_advisors(self, membership_type, **kwargs):  # noqa: E501
        """get_bond_advisors  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_bond_advisors(membership_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BungieMembershipType membership_type: The type of account for which info will be extracted. (required)
        :param bool definitions: Include definitions in the response. Use while testing.
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_bond_advisors_with_http_info(membership_type, **kwargs)  # noqa: E501
        else:
            (data) = self.get_bond_advisors_with_http_info(membership_type, **kwargs)  # noqa: E501
            return data

    def get_bond_advisors_with_http_info(self, membership_type, **kwargs):  # noqa: E501
        """get_bond_advisors  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_bond_advisors_with_http_info(membership_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BungieMembershipType membership_type: The type of account for which info will be extracted. (required)
        :param bool definitions: Include definitions in the response. Use while testing.
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['membership_type', 'definitions']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_bond_advisors" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'membership_type' is set
        if ('membership_type' not in local_var_params or
                local_var_params['membership_type'] is None):
            raise ValueError("Missing the required parameter `membership_type` when calling `get_bond_advisors`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'membership_type' in local_var_params:
            path_params['membershipType'] = local_var_params['membership_type']  # noqa: E501

        query_params = []
        if 'definitions' in local_var_params:
            query_params.append(('definitions', local_var_params['definitions']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/Destiny/{membershipType}/MyAccount/Advisors/Bonds/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_character(self, membership_type, destiny_membership_id, character_id, **kwargs):  # noqa: E501
        """get_character  # noqa: E501

        Returns Destiny character information with a given characterId. This endpoint is an extended version of [[GetCharacterSummary]].  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_character(membership_type, destiny_membership_id, character_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BungieMembershipType membership_type: The type of account for which info will be extracted. (required)
        :param int destiny_membership_id: Destiny membership ID. (required)
        :param str character_id: (required)
        :param bool definitions: Include definitions in the response. Use while testing.
        :return: InlineResponse2003
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_character_with_http_info(membership_type, destiny_membership_id, character_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_character_with_http_info(membership_type, destiny_membership_id, character_id, **kwargs)  # noqa: E501
            return data

    def get_character_with_http_info(self, membership_type, destiny_membership_id, character_id, **kwargs):  # noqa: E501
        """get_character  # noqa: E501

        Returns Destiny character information with a given characterId. This endpoint is an extended version of [[GetCharacterSummary]].  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_character_with_http_info(membership_type, destiny_membership_id, character_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BungieMembershipType membership_type: The type of account for which info will be extracted. (required)
        :param int destiny_membership_id: Destiny membership ID. (required)
        :param str character_id: (required)
        :param bool definitions: Include definitions in the response. Use while testing.
        :return: InlineResponse2003
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['membership_type', 'destiny_membership_id', 'character_id', 'definitions']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_character" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'membership_type' is set
        if ('membership_type' not in local_var_params or
                local_var_params['membership_type'] is None):
            raise ValueError("Missing the required parameter `membership_type` when calling `get_character`")  # noqa: E501
        # verify the required parameter 'destiny_membership_id' is set
        if ('destiny_membership_id' not in local_var_params or
                local_var_params['destiny_membership_id'] is None):
            raise ValueError("Missing the required parameter `destiny_membership_id` when calling `get_character`")  # noqa: E501
        # verify the required parameter 'character_id' is set
        if ('character_id' not in local_var_params or
                local_var_params['character_id'] is None):
            raise ValueError("Missing the required parameter `character_id` when calling `get_character`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'membership_type' in local_var_params:
            path_params['membershipType'] = local_var_params['membership_type']  # noqa: E501
        if 'destiny_membership_id' in local_var_params:
            path_params['destinyMembershipId'] = local_var_params['destiny_membership_id']  # noqa: E501
        if 'character_id' in local_var_params:
            path_params['characterId'] = local_var_params['character_id']  # noqa: E501

        query_params = []
        if 'definitions' in local_var_params:
            query_params.append(('definitions', local_var_params['definitions']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/Destiny/{membershipType}/Account/{destinyMembershipId}/Character/{characterId}/Complete/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2003',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_character_activities(self, membership_type, destiny_membership_id, character_id, **kwargs):  # noqa: E501
        """get_character_activities  # noqa: E501

        Returns activity progress for a given character.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_character_activities(membership_type, destiny_membership_id, character_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BungieMembershipType membership_type: The type of account for which info will be extracted. (required)
        :param int destiny_membership_id: Destiny membership ID. (required)
        :param str character_id: (required)
        :param bool definitions: Include definitions in the response. Use while testing.
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_character_activities_with_http_info(membership_type, destiny_membership_id, character_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_character_activities_with_http_info(membership_type, destiny_membership_id, character_id, **kwargs)  # noqa: E501
            return data

    def get_character_activities_with_http_info(self, membership_type, destiny_membership_id, character_id, **kwargs):  # noqa: E501
        """get_character_activities  # noqa: E501

        Returns activity progress for a given character.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_character_activities_with_http_info(membership_type, destiny_membership_id, character_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BungieMembershipType membership_type: The type of account for which info will be extracted. (required)
        :param int destiny_membership_id: Destiny membership ID. (required)
        :param str character_id: (required)
        :param bool definitions: Include definitions in the response. Use while testing.
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['membership_type', 'destiny_membership_id', 'character_id', 'definitions']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_character_activities" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'membership_type' is set
        if ('membership_type' not in local_var_params or
                local_var_params['membership_type'] is None):
            raise ValueError("Missing the required parameter `membership_type` when calling `get_character_activities`")  # noqa: E501
        # verify the required parameter 'destiny_membership_id' is set
        if ('destiny_membership_id' not in local_var_params or
                local_var_params['destiny_membership_id'] is None):
            raise ValueError("Missing the required parameter `destiny_membership_id` when calling `get_character_activities`")  # noqa: E501
        # verify the required parameter 'character_id' is set
        if ('character_id' not in local_var_params or
                local_var_params['character_id'] is None):
            raise ValueError("Missing the required parameter `character_id` when calling `get_character_activities`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'membership_type' in local_var_params:
            path_params['membershipType'] = local_var_params['membership_type']  # noqa: E501
        if 'destiny_membership_id' in local_var_params:
            path_params['destinyMembershipId'] = local_var_params['destiny_membership_id']  # noqa: E501
        if 'character_id' in local_var_params:
            path_params['characterId'] = local_var_params['character_id']  # noqa: E501

        query_params = []
        if 'definitions' in local_var_params:
            query_params.append(('definitions', local_var_params['definitions']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/Destiny/{membershipType}/Account/{destinyMembershipId}/Character/{characterId}/Activities/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_character_inventory(self, membership_type, destiny_membership_id, character_id, **kwargs):  # noqa: E501
        """get_character_inventory  # noqa: E501

        Returns the inventory of a Destiny character.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_character_inventory(membership_type, destiny_membership_id, character_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BungieMembershipType membership_type: The type of account for which info will be extracted. (required)
        :param int destiny_membership_id: Destiny membership ID. (required)
        :param str character_id: (required)
        :param bool definitions: Include definitions in the response. Use while testing.
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_character_inventory_with_http_info(membership_type, destiny_membership_id, character_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_character_inventory_with_http_info(membership_type, destiny_membership_id, character_id, **kwargs)  # noqa: E501
            return data

    def get_character_inventory_with_http_info(self, membership_type, destiny_membership_id, character_id, **kwargs):  # noqa: E501
        """get_character_inventory  # noqa: E501

        Returns the inventory of a Destiny character.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_character_inventory_with_http_info(membership_type, destiny_membership_id, character_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BungieMembershipType membership_type: The type of account for which info will be extracted. (required)
        :param int destiny_membership_id: Destiny membership ID. (required)
        :param str character_id: (required)
        :param bool definitions: Include definitions in the response. Use while testing.
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['membership_type', 'destiny_membership_id', 'character_id', 'definitions']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_character_inventory" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'membership_type' is set
        if ('membership_type' not in local_var_params or
                local_var_params['membership_type'] is None):
            raise ValueError("Missing the required parameter `membership_type` when calling `get_character_inventory`")  # noqa: E501
        # verify the required parameter 'destiny_membership_id' is set
        if ('destiny_membership_id' not in local_var_params or
                local_var_params['destiny_membership_id'] is None):
            raise ValueError("Missing the required parameter `destiny_membership_id` when calling `get_character_inventory`")  # noqa: E501
        # verify the required parameter 'character_id' is set
        if ('character_id' not in local_var_params or
                local_var_params['character_id'] is None):
            raise ValueError("Missing the required parameter `character_id` when calling `get_character_inventory`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'membership_type' in local_var_params:
            path_params['membershipType'] = local_var_params['membership_type']  # noqa: E501
        if 'destiny_membership_id' in local_var_params:
            path_params['destinyMembershipId'] = local_var_params['destiny_membership_id']  # noqa: E501
        if 'character_id' in local_var_params:
            path_params['characterId'] = local_var_params['character_id']  # noqa: E501

        query_params = []
        if 'definitions' in local_var_params:
            query_params.append(('definitions', local_var_params['definitions']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/Destiny/{membershipType}/Account/{destinyMembershipId}/Character/{characterId}/Inventory/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_character_inventory_summary(self, membership_type, destiny_membership_id, character_id, **kwargs):  # noqa: E501
        """get_character_inventory_summary  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_character_inventory_summary(membership_type, destiny_membership_id, character_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BungieMembershipType membership_type: The type of account for which info will be extracted. (required)
        :param int destiny_membership_id: Destiny membership ID. (required)
        :param str character_id: (required)
        :param bool definitions: Include definitions in the response. Use while testing.
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_character_inventory_summary_with_http_info(membership_type, destiny_membership_id, character_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_character_inventory_summary_with_http_info(membership_type, destiny_membership_id, character_id, **kwargs)  # noqa: E501
            return data

    def get_character_inventory_summary_with_http_info(self, membership_type, destiny_membership_id, character_id, **kwargs):  # noqa: E501
        """get_character_inventory_summary  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_character_inventory_summary_with_http_info(membership_type, destiny_membership_id, character_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BungieMembershipType membership_type: The type of account for which info will be extracted. (required)
        :param int destiny_membership_id: Destiny membership ID. (required)
        :param str character_id: (required)
        :param bool definitions: Include definitions in the response. Use while testing.
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['membership_type', 'destiny_membership_id', 'character_id', 'definitions']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_character_inventory_summary" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'membership_type' is set
        if ('membership_type' not in local_var_params or
                local_var_params['membership_type'] is None):
            raise ValueError("Missing the required parameter `membership_type` when calling `get_character_inventory_summary`")  # noqa: E501
        # verify the required parameter 'destiny_membership_id' is set
        if ('destiny_membership_id' not in local_var_params or
                local_var_params['destiny_membership_id'] is None):
            raise ValueError("Missing the required parameter `destiny_membership_id` when calling `get_character_inventory_summary`")  # noqa: E501
        # verify the required parameter 'character_id' is set
        if ('character_id' not in local_var_params or
                local_var_params['character_id'] is None):
            raise ValueError("Missing the required parameter `character_id` when calling `get_character_inventory_summary`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'membership_type' in local_var_params:
            path_params['membershipType'] = local_var_params['membership_type']  # noqa: E501
        if 'destiny_membership_id' in local_var_params:
            path_params['destinyMembershipId'] = local_var_params['destiny_membership_id']  # noqa: E501
        if 'character_id' in local_var_params:
            path_params['characterId'] = local_var_params['character_id']  # noqa: E501

        query_params = []
        if 'definitions' in local_var_params:
            query_params.append(('definitions', local_var_params['definitions']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/Destiny/{membershipType}/Account/{destinyMembershipId}/Character/{characterId}/Inventory/Summary/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_character_progression(self, membership_type, destiny_membership_id, character_id, **kwargs):  # noqa: E501
        """get_character_progression  # noqa: E501

        Returns progression information for a given Destiny character.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_character_progression(membership_type, destiny_membership_id, character_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BungieMembershipType membership_type: The type of account for which info will be extracted. (required)
        :param int destiny_membership_id: Destiny membership ID. (required)
        :param str character_id: (required)
        :param bool definitions: Include definitions in the response. Use while testing.
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_character_progression_with_http_info(membership_type, destiny_membership_id, character_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_character_progression_with_http_info(membership_type, destiny_membership_id, character_id, **kwargs)  # noqa: E501
            return data

    def get_character_progression_with_http_info(self, membership_type, destiny_membership_id, character_id, **kwargs):  # noqa: E501
        """get_character_progression  # noqa: E501

        Returns progression information for a given Destiny character.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_character_progression_with_http_info(membership_type, destiny_membership_id, character_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BungieMembershipType membership_type: The type of account for which info will be extracted. (required)
        :param int destiny_membership_id: Destiny membership ID. (required)
        :param str character_id: (required)
        :param bool definitions: Include definitions in the response. Use while testing.
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['membership_type', 'destiny_membership_id', 'character_id', 'definitions']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_character_progression" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'membership_type' is set
        if ('membership_type' not in local_var_params or
                local_var_params['membership_type'] is None):
            raise ValueError("Missing the required parameter `membership_type` when calling `get_character_progression`")  # noqa: E501
        # verify the required parameter 'destiny_membership_id' is set
        if ('destiny_membership_id' not in local_var_params or
                local_var_params['destiny_membership_id'] is None):
            raise ValueError("Missing the required parameter `destiny_membership_id` when calling `get_character_progression`")  # noqa: E501
        # verify the required parameter 'character_id' is set
        if ('character_id' not in local_var_params or
                local_var_params['character_id'] is None):
            raise ValueError("Missing the required parameter `character_id` when calling `get_character_progression`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'membership_type' in local_var_params:
            path_params['membershipType'] = local_var_params['membership_type']  # noqa: E501
        if 'destiny_membership_id' in local_var_params:
            path_params['destinyMembershipId'] = local_var_params['destiny_membership_id']  # noqa: E501
        if 'character_id' in local_var_params:
            path_params['characterId'] = local_var_params['character_id']  # noqa: E501

        query_params = []
        if 'definitions' in local_var_params:
            query_params.append(('definitions', local_var_params['definitions']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/Destiny/{membershipType}/Account/{destinyMembershipId}/Character/{characterId}/Progression/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_character_summary(self, membership_type, destiny_membership_id, character_id, **kwargs):  # noqa: E501
        """get_character_summary  # noqa: E501

        Returns Destiny character information for the given characterId.<br/>To get a more detailed overview, see the private endpoint [[GetDestinyAccountCharacterComplete]].  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_character_summary(membership_type, destiny_membership_id, character_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BungieMembershipType membership_type: The type of account for which info will be extracted. (required)
        :param int destiny_membership_id: Destiny membership ID. (required)
        :param str character_id: (required)
        :param bool definitions: Include definitions in the response. Use while testing.
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_character_summary_with_http_info(membership_type, destiny_membership_id, character_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_character_summary_with_http_info(membership_type, destiny_membership_id, character_id, **kwargs)  # noqa: E501
            return data

    def get_character_summary_with_http_info(self, membership_type, destiny_membership_id, character_id, **kwargs):  # noqa: E501
        """get_character_summary  # noqa: E501

        Returns Destiny character information for the given characterId.<br/>To get a more detailed overview, see the private endpoint [[GetDestinyAccountCharacterComplete]].  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_character_summary_with_http_info(membership_type, destiny_membership_id, character_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BungieMembershipType membership_type: The type of account for which info will be extracted. (required)
        :param int destiny_membership_id: Destiny membership ID. (required)
        :param str character_id: (required)
        :param bool definitions: Include definitions in the response. Use while testing.
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['membership_type', 'destiny_membership_id', 'character_id', 'definitions']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_character_summary" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'membership_type' is set
        if ('membership_type' not in local_var_params or
                local_var_params['membership_type'] is None):
            raise ValueError("Missing the required parameter `membership_type` when calling `get_character_summary`")  # noqa: E501
        # verify the required parameter 'destiny_membership_id' is set
        if ('destiny_membership_id' not in local_var_params or
                local_var_params['destiny_membership_id'] is None):
            raise ValueError("Missing the required parameter `destiny_membership_id` when calling `get_character_summary`")  # noqa: E501
        # verify the required parameter 'character_id' is set
        if ('character_id' not in local_var_params or
                local_var_params['character_id'] is None):
            raise ValueError("Missing the required parameter `character_id` when calling `get_character_summary`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'membership_type' in local_var_params:
            path_params['membershipType'] = local_var_params['membership_type']  # noqa: E501
        if 'destiny_membership_id' in local_var_params:
            path_params['destinyMembershipId'] = local_var_params['destiny_membership_id']  # noqa: E501
        if 'character_id' in local_var_params:
            path_params['characterId'] = local_var_params['character_id']  # noqa: E501

        query_params = []
        if 'definitions' in local_var_params:
            query_params.append(('definitions', local_var_params['definitions']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/Destiny/{membershipType}/Account/{destinyMembershipId}/Character/{characterId}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_clan_leaderboards(self, clan_id, **kwargs):  # noqa: E501
        """get_clan_leaderboards  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_clan_leaderboards(clan_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int clan_id: A valid clan ID. (required)
        :param list[ActivityModeType] modes: Game modes to return. Comma separated.
        :param str statid:
        :param str maxtop:
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_clan_leaderboards_with_http_info(clan_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_clan_leaderboards_with_http_info(clan_id, **kwargs)  # noqa: E501
            return data

    def get_clan_leaderboards_with_http_info(self, clan_id, **kwargs):  # noqa: E501
        """get_clan_leaderboards  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_clan_leaderboards_with_http_info(clan_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int clan_id: A valid clan ID. (required)
        :param list[ActivityModeType] modes: Game modes to return. Comma separated.
        :param str statid:
        :param str maxtop:
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['clan_id', 'modes', 'statid', 'maxtop']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_clan_leaderboards" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'clan_id' is set
        if ('clan_id' not in local_var_params or
                local_var_params['clan_id'] is None):
            raise ValueError("Missing the required parameter `clan_id` when calling `get_clan_leaderboards`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'clan_id' in local_var_params:
            path_params['clanId'] = local_var_params['clan_id']  # noqa: E501

        query_params = []
        if 'modes' in local_var_params:
            query_params.append(('modes', local_var_params['modes']))  # noqa: E501
            collection_formats['modes'] = 'multi'  # noqa: E501
        if 'statid' in local_var_params:
            query_params.append(('statid', local_var_params['statid']))  # noqa: E501
        if 'maxtop' in local_var_params:
            query_params.append(('maxtop', local_var_params['maxtop']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/Destiny/Stats/ClanLeaderboards/{clanId}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_destiny_aggregate_activity_stats(self, membership_type, destiny_membership_id, character_id, **kwargs):  # noqa: E501
        """get_destiny_aggregate_activity_stats  # noqa: E501

        Gets all activities the character has participated in together with aggregate statistics for those activities.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_destiny_aggregate_activity_stats(membership_type, destiny_membership_id, character_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BungieMembershipType membership_type: The type of account for which info will be extracted. (required)
        :param int destiny_membership_id: Destiny membership ID. (required)
        :param str character_id: (required)
        :param bool definitions: Include definitions in the response. Use while testing.
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_destiny_aggregate_activity_stats_with_http_info(membership_type, destiny_membership_id, character_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_destiny_aggregate_activity_stats_with_http_info(membership_type, destiny_membership_id, character_id, **kwargs)  # noqa: E501
            return data

    def get_destiny_aggregate_activity_stats_with_http_info(self, membership_type, destiny_membership_id, character_id, **kwargs):  # noqa: E501
        """get_destiny_aggregate_activity_stats  # noqa: E501

        Gets all activities the character has participated in together with aggregate statistics for those activities.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_destiny_aggregate_activity_stats_with_http_info(membership_type, destiny_membership_id, character_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BungieMembershipType membership_type: The type of account for which info will be extracted. (required)
        :param int destiny_membership_id: Destiny membership ID. (required)
        :param str character_id: (required)
        :param bool definitions: Include definitions in the response. Use while testing.
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['membership_type', 'destiny_membership_id', 'character_id', 'definitions']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_destiny_aggregate_activity_stats" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'membership_type' is set
        if ('membership_type' not in local_var_params or
                local_var_params['membership_type'] is None):
            raise ValueError("Missing the required parameter `membership_type` when calling `get_destiny_aggregate_activity_stats`")  # noqa: E501
        # verify the required parameter 'destiny_membership_id' is set
        if ('destiny_membership_id' not in local_var_params or
                local_var_params['destiny_membership_id'] is None):
            raise ValueError("Missing the required parameter `destiny_membership_id` when calling `get_destiny_aggregate_activity_stats`")  # noqa: E501
        # verify the required parameter 'character_id' is set
        if ('character_id' not in local_var_params or
                local_var_params['character_id'] is None):
            raise ValueError("Missing the required parameter `character_id` when calling `get_destiny_aggregate_activity_stats`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'membership_type' in local_var_params:
            path_params['membershipType'] = local_var_params['membership_type']  # noqa: E501
        if 'destiny_membership_id' in local_var_params:
            path_params['destinyMembershipId'] = local_var_params['destiny_membership_id']  # noqa: E501
        if 'character_id' in local_var_params:
            path_params['characterId'] = local_var_params['character_id']  # noqa: E501

        query_params = []
        if 'definitions' in local_var_params:
            query_params.append(('definitions', local_var_params['definitions']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/Destiny/Stats/AggregateActivityStats/{membershipType}/{destinyMembershipId}/{characterId}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_destiny_explorer_items(self, **kwargs):  # noqa: E501
        """get_destiny_explorer_items  # noqa: E501

        Advanced InventoryItem search.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_destiny_explorer_items(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int count: The number of results to return. Default is 10.
        :param str name: Filter by name.
        :param ExplorerOrderBy order: Order results.
        :param TierType rarity: Filter by item rarity.
        :param list[DamageType] damage_types: Filter by damage type.
        :param bool definitions: Include definitions in the response. Use while testing.
        :param str rarity2:
        :param str step:
        :param str categories:
        :param str weapon_performance:
        :param str impact_effects:
        :param str guardian_attributes:
        :param str light_abilities:
        :param str damage_types2:
        :param str matchrandomsteps:
        :param str definitions2:
        :param str sourcecat:
        :param str sourcehash:
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_destiny_explorer_items_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_destiny_explorer_items_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_destiny_explorer_items_with_http_info(self, **kwargs):  # noqa: E501
        """get_destiny_explorer_items  # noqa: E501

        Advanced InventoryItem search.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_destiny_explorer_items_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int count: The number of results to return. Default is 10.
        :param str name: Filter by name.
        :param ExplorerOrderBy order: Order results.
        :param TierType rarity: Filter by item rarity.
        :param list[DamageType] damage_types: Filter by damage type.
        :param bool definitions: Include definitions in the response. Use while testing.
        :param str rarity2:
        :param str step:
        :param str categories:
        :param str weapon_performance:
        :param str impact_effects:
        :param str guardian_attributes:
        :param str light_abilities:
        :param str damage_types2:
        :param str matchrandomsteps:
        :param str definitions2:
        :param str sourcecat:
        :param str sourcehash:
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['count', 'name', 'order', 'rarity', 'damage_types', 'definitions', 'rarity2', 'step', 'categories', 'weapon_performance', 'impact_effects', 'guardian_attributes', 'light_abilities', 'damage_types2', 'matchrandomsteps', 'definitions2', 'sourcecat', 'sourcehash']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_destiny_explorer_items" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'count' in local_var_params:
            query_params.append(('count', local_var_params['count']))  # noqa: E501
        if 'name' in local_var_params:
            query_params.append(('name', local_var_params['name']))  # noqa: E501
        if 'order' in local_var_params:
            query_params.append(('order', local_var_params['order']))  # noqa: E501
        if 'rarity' in local_var_params:
            query_params.append(('rarity', local_var_params['rarity']))  # noqa: E501
        if 'damage_types' in local_var_params:
            query_params.append(('damageTypes', local_var_params['damage_types']))  # noqa: E501
            collection_formats['damageTypes'] = 'multi'  # noqa: E501
        if 'definitions' in local_var_params:
            query_params.append(('definitions', local_var_params['definitions']))  # noqa: E501
        if 'rarity2' in local_var_params:
            query_params.append(('rarity', local_var_params['rarity2']))  # noqa: E501
        if 'step' in local_var_params:
            query_params.append(('step', local_var_params['step']))  # noqa: E501
        if 'categories' in local_var_params:
            query_params.append(('categories', local_var_params['categories']))  # noqa: E501
        if 'weapon_performance' in local_var_params:
            query_params.append(('weaponPerformance', local_var_params['weapon_performance']))  # noqa: E501
        if 'impact_effects' in local_var_params:
            query_params.append(('impactEffects', local_var_params['impact_effects']))  # noqa: E501
        if 'guardian_attributes' in local_var_params:
            query_params.append(('guardianAttributes', local_var_params['guardian_attributes']))  # noqa: E501
        if 'light_abilities' in local_var_params:
            query_params.append(('lightAbilities', local_var_params['light_abilities']))  # noqa: E501
        if 'damage_types2' in local_var_params:
            query_params.append(('damageTypes', local_var_params['damage_types2']))  # noqa: E501
        if 'matchrandomsteps' in local_var_params:
            query_params.append(('matchrandomsteps', local_var_params['matchrandomsteps']))  # noqa: E501
        if 'definitions2' in local_var_params:
            query_params.append(('definitions', local_var_params['definitions2']))  # noqa: E501
        if 'sourcecat' in local_var_params:
            query_params.append(('sourcecat', local_var_params['sourcecat']))  # noqa: E501
        if 'sourcehash' in local_var_params:
            query_params.append(('sourcehash', local_var_params['sourcehash']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/Destiny/Explorer/Items/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_destiny_explorer_talent_node_steps(self, **kwargs):  # noqa: E501
        """get_destiny_explorer_talent_node_steps  # noqa: E501

        Advanced search for TalentNodes.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_destiny_explorer_talent_node_steps(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int page: The current page to return. Starts at 1.
        :param int count: The number of results per page. Default is 10.
        :param str name: Filter by name.
        :param list[DamageType] damage_types: Filter by damage type.
        :param bool definitions: Include definitions in the response. Use while testing.
        :param str impact_effects:
        :param str guardian_attributes:
        :param str light_abilities:
        :param str damage_types2:
        :param str definitions2:
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_destiny_explorer_talent_node_steps_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_destiny_explorer_talent_node_steps_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_destiny_explorer_talent_node_steps_with_http_info(self, **kwargs):  # noqa: E501
        """get_destiny_explorer_talent_node_steps  # noqa: E501

        Advanced search for TalentNodes.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_destiny_explorer_talent_node_steps_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int page: The current page to return. Starts at 1.
        :param int count: The number of results per page. Default is 10.
        :param str name: Filter by name.
        :param list[DamageType] damage_types: Filter by damage type.
        :param bool definitions: Include definitions in the response. Use while testing.
        :param str impact_effects:
        :param str guardian_attributes:
        :param str light_abilities:
        :param str damage_types2:
        :param str definitions2:
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['page', 'count', 'name', 'damage_types', 'definitions', 'impact_effects', 'guardian_attributes', 'light_abilities', 'damage_types2', 'definitions2']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_destiny_explorer_talent_node_steps" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'page' in local_var_params:
            query_params.append(('page', local_var_params['page']))  # noqa: E501
        if 'count' in local_var_params:
            query_params.append(('count', local_var_params['count']))  # noqa: E501
        if 'name' in local_var_params:
            query_params.append(('name', local_var_params['name']))  # noqa: E501
        if 'damage_types' in local_var_params:
            query_params.append(('damageTypes', local_var_params['damage_types']))  # noqa: E501
            collection_formats['damageTypes'] = 'multi'  # noqa: E501
        if 'definitions' in local_var_params:
            query_params.append(('definitions', local_var_params['definitions']))  # noqa: E501
        if 'impact_effects' in local_var_params:
            query_params.append(('impactEffects', local_var_params['impact_effects']))  # noqa: E501
        if 'guardian_attributes' in local_var_params:
            query_params.append(('guardianAttributes', local_var_params['guardian_attributes']))  # noqa: E501
        if 'light_abilities' in local_var_params:
            query_params.append(('lightAbilities', local_var_params['light_abilities']))  # noqa: E501
        if 'damage_types2' in local_var_params:
            query_params.append(('damageTypes', local_var_params['damage_types2']))  # noqa: E501
        if 'definitions2' in local_var_params:
            query_params.append(('definitions', local_var_params['definitions2']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/Destiny/Explorer/TalentNodeSteps/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_destiny_live_tile_content_items(self, **kwargs):  # noqa: E501
        """get_destiny_live_tile_content_items  # noqa: E501

        Returns a list of \"tiles\" used on the Bungie.net website.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_destiny_live_tile_content_items(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_destiny_live_tile_content_items_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_destiny_live_tile_content_items_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_destiny_live_tile_content_items_with_http_info(self, **kwargs):  # noqa: E501
        """get_destiny_live_tile_content_items  # noqa: E501

        Returns a list of \"tiles\" used on the Bungie.net website.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_destiny_live_tile_content_items_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_destiny_live_tile_content_items" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/Destiny/LiveTiles/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_destiny_manifest(self, **kwargs):  # noqa: E501
        """get_destiny_manifest  # noqa: E501

        Returns the current version of the Destiny 1 mobile manifest as a json object.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_destiny_manifest(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: InlineResponse2001
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_destiny_manifest_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_destiny_manifest_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_destiny_manifest_with_http_info(self, **kwargs):  # noqa: E501
        """get_destiny_manifest  # noqa: E501

        Returns the current version of the Destiny 1 mobile manifest as a json object.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_destiny_manifest_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: InlineResponse2001
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_destiny_manifest" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/Destiny/Manifest/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2001',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_destiny_single_definition(self, definition_type, definition_id, **kwargs):  # noqa: E501
        """get_destiny_single_definition  # noqa: E501

        Returns a single definition from the manifest as json object.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_destiny_single_definition(definition_type, definition_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DefinitionType definition_type: (required)
        :param int definition_id: (required)
        :param bool definitions: Include definitions in the response. Use while testing.
        :param str version:
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_destiny_single_definition_with_http_info(definition_type, definition_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_destiny_single_definition_with_http_info(definition_type, definition_id, **kwargs)  # noqa: E501
            return data

    def get_destiny_single_definition_with_http_info(self, definition_type, definition_id, **kwargs):  # noqa: E501
        """get_destiny_single_definition  # noqa: E501

        Returns a single definition from the manifest as json object.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_destiny_single_definition_with_http_info(definition_type, definition_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DefinitionType definition_type: (required)
        :param int definition_id: (required)
        :param bool definitions: Include definitions in the response. Use while testing.
        :param str version:
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['definition_type', 'definition_id', 'definitions', 'version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_destiny_single_definition" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'definition_type' is set
        if ('definition_type' not in local_var_params or
                local_var_params['definition_type'] is None):
            raise ValueError("Missing the required parameter `definition_type` when calling `get_destiny_single_definition`")  # noqa: E501
        # verify the required parameter 'definition_id' is set
        if ('definition_id' not in local_var_params or
                local_var_params['definition_id'] is None):
            raise ValueError("Missing the required parameter `definition_id` when calling `get_destiny_single_definition`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'definition_type' in local_var_params:
            path_params['definitionType'] = local_var_params['definition_type']  # noqa: E501
        if 'definition_id' in local_var_params:
            path_params['definitionId'] = local_var_params['definition_id']  # noqa: E501

        query_params = []
        if 'definitions' in local_var_params:
            query_params.append(('definitions', local_var_params['definitions']))  # noqa: E501
        if 'version' in local_var_params:
            query_params.append(('version', local_var_params['version']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/Destiny/Manifest/{definitionType}/{definitionId}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_excellence_badges(self, membership_type, destiny_membership_id, **kwargs):  # noqa: E501
        """get_excellence_badges  # noqa: E501

        Returns Destiny excellence badges for a given account. No longer in use.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_excellence_badges(membership_type, destiny_membership_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BungieMembershipType membership_type: The type of account for which info will be extracted. (required)
        :param int destiny_membership_id: Destiny membership ID. (required)
        :param bool definitions: Include definitions in the response. Use while testing.
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_excellence_badges_with_http_info(membership_type, destiny_membership_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_excellence_badges_with_http_info(membership_type, destiny_membership_id, **kwargs)  # noqa: E501
            return data

    def get_excellence_badges_with_http_info(self, membership_type, destiny_membership_id, **kwargs):  # noqa: E501
        """get_excellence_badges  # noqa: E501

        Returns Destiny excellence badges for a given account. No longer in use.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_excellence_badges_with_http_info(membership_type, destiny_membership_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BungieMembershipType membership_type: The type of account for which info will be extracted. (required)
        :param int destiny_membership_id: Destiny membership ID. (required)
        :param bool definitions: Include definitions in the response. Use while testing.
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['membership_type', 'destiny_membership_id', 'definitions']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_excellence_badges" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'membership_type' is set
        if ('membership_type' not in local_var_params or
                local_var_params['membership_type'] is None):
            raise ValueError("Missing the required parameter `membership_type` when calling `get_excellence_badges`")  # noqa: E501
        # verify the required parameter 'destiny_membership_id' is set
        if ('destiny_membership_id' not in local_var_params or
                local_var_params['destiny_membership_id'] is None):
            raise ValueError("Missing the required parameter `destiny_membership_id` when calling `get_excellence_badges`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'membership_type' in local_var_params:
            path_params['membershipType'] = local_var_params['membership_type']  # noqa: E501
        if 'destiny_membership_id' in local_var_params:
            path_params['destinyMembershipId'] = local_var_params['destiny_membership_id']  # noqa: E501

        query_params = []
        if 'definitions' in local_var_params:
            query_params.append(('definitions', local_var_params['definitions']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/Destiny/Stats/GetExcellenceBadges/{membershipType}/{destinyMembershipId}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_grimoire_by_membership(self, membership_type, destiny_membership_id, **kwargs):  # noqa: E501
        """get_grimoire_by_membership  # noqa: E501

        Returns the Grimoire for a given account.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_grimoire_by_membership(membership_type, destiny_membership_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BungieMembershipType membership_type: The type of account for which info will be extracted. (required)
        :param int destiny_membership_id: Destiny membership ID. (required)
        :param bool definitions: Include definitions in the response. Use while testing.
        :param str flavour: Indicates flavour stats should be included with player card data. More testing needed.
        :param int single: Return data for a single cardId.
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_grimoire_by_membership_with_http_info(membership_type, destiny_membership_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_grimoire_by_membership_with_http_info(membership_type, destiny_membership_id, **kwargs)  # noqa: E501
            return data

    def get_grimoire_by_membership_with_http_info(self, membership_type, destiny_membership_id, **kwargs):  # noqa: E501
        """get_grimoire_by_membership  # noqa: E501

        Returns the Grimoire for a given account.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_grimoire_by_membership_with_http_info(membership_type, destiny_membership_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BungieMembershipType membership_type: The type of account for which info will be extracted. (required)
        :param int destiny_membership_id: Destiny membership ID. (required)
        :param bool definitions: Include definitions in the response. Use while testing.
        :param str flavour: Indicates flavour stats should be included with player card data. More testing needed.
        :param int single: Return data for a single cardId.
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['membership_type', 'destiny_membership_id', 'definitions', 'flavour', 'single']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_grimoire_by_membership" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'membership_type' is set
        if ('membership_type' not in local_var_params or
                local_var_params['membership_type'] is None):
            raise ValueError("Missing the required parameter `membership_type` when calling `get_grimoire_by_membership`")  # noqa: E501
        # verify the required parameter 'destiny_membership_id' is set
        if ('destiny_membership_id' not in local_var_params or
                local_var_params['destiny_membership_id'] is None):
            raise ValueError("Missing the required parameter `destiny_membership_id` when calling `get_grimoire_by_membership`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'membership_type' in local_var_params:
            path_params['membershipType'] = local_var_params['membership_type']  # noqa: E501
        if 'destiny_membership_id' in local_var_params:
            path_params['destinyMembershipId'] = local_var_params['destiny_membership_id']  # noqa: E501

        query_params = []
        if 'definitions' in local_var_params:
            query_params.append(('definitions', local_var_params['definitions']))  # noqa: E501
        if 'flavour' in local_var_params:
            query_params.append(('flavour', local_var_params['flavour']))  # noqa: E501
        if 'single' in local_var_params:
            query_params.append(('single', local_var_params['single']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/Destiny/Vanguard/Grimoire/{membershipType}/{destinyMembershipId}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_grimoire_definition(self, **kwargs):  # noqa: E501
        """get_grimoire_definition  # noqa: E501

        Returns Grimoire definitions. This is the equivalent pulling the [[GrimoireDefinition]] from the [[Manifest]].  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_grimoire_definition(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_grimoire_definition_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_grimoire_definition_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_grimoire_definition_with_http_info(self, **kwargs):  # noqa: E501
        """get_grimoire_definition  # noqa: E501

        Returns Grimoire definitions. This is the equivalent pulling the [[GrimoireDefinition]] from the [[Manifest]].  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_grimoire_definition_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_grimoire_definition" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/Destiny/Vanguard/Grimoire/Definition/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_historical_stats(self, membership_type, destiny_membership_id, character_id, **kwargs):  # noqa: E501
        """get_historical_stats  # noqa: E501

        Returns historical stat information about a given Destiny character.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_historical_stats(membership_type, destiny_membership_id, character_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BungieMembershipType membership_type: The type of account for which info will be extracted. (required)
        :param int destiny_membership_id: Destiny membership ID. (required)
        :param str character_id: (required)
        :param PeriodType period_type: Indicates a specific period type to return.
        :param list[ActivityModeType] modes: Game modes to return. Comma separated.
        :param list[StatsGroupType] groups: Group of stats to include, otherwise only general stats are returned. Comma separated.
        :param str monthstart: First month to return when monthly stats are requested. Use the format YYYY-MM.
        :param str monthend: Last month to return when monthly stats are requested. Use the format YYYY-MM.
        :param str daystart: First day to return when daily stats are requested. Use the format YYYY-MM-DD.
        :param str dayend: Last day to return when daily stats are requested. Use the format YYYY-MM-DD.
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_historical_stats_with_http_info(membership_type, destiny_membership_id, character_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_historical_stats_with_http_info(membership_type, destiny_membership_id, character_id, **kwargs)  # noqa: E501
            return data

    def get_historical_stats_with_http_info(self, membership_type, destiny_membership_id, character_id, **kwargs):  # noqa: E501
        """get_historical_stats  # noqa: E501

        Returns historical stat information about a given Destiny character.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_historical_stats_with_http_info(membership_type, destiny_membership_id, character_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BungieMembershipType membership_type: The type of account for which info will be extracted. (required)
        :param int destiny_membership_id: Destiny membership ID. (required)
        :param str character_id: (required)
        :param PeriodType period_type: Indicates a specific period type to return.
        :param list[ActivityModeType] modes: Game modes to return. Comma separated.
        :param list[StatsGroupType] groups: Group of stats to include, otherwise only general stats are returned. Comma separated.
        :param str monthstart: First month to return when monthly stats are requested. Use the format YYYY-MM.
        :param str monthend: Last month to return when monthly stats are requested. Use the format YYYY-MM.
        :param str daystart: First day to return when daily stats are requested. Use the format YYYY-MM-DD.
        :param str dayend: Last day to return when daily stats are requested. Use the format YYYY-MM-DD.
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['membership_type', 'destiny_membership_id', 'character_id', 'period_type', 'modes', 'groups', 'monthstart', 'monthend', 'daystart', 'dayend']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_historical_stats" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'membership_type' is set
        if ('membership_type' not in local_var_params or
                local_var_params['membership_type'] is None):
            raise ValueError("Missing the required parameter `membership_type` when calling `get_historical_stats`")  # noqa: E501
        # verify the required parameter 'destiny_membership_id' is set
        if ('destiny_membership_id' not in local_var_params or
                local_var_params['destiny_membership_id'] is None):
            raise ValueError("Missing the required parameter `destiny_membership_id` when calling `get_historical_stats`")  # noqa: E501
        # verify the required parameter 'character_id' is set
        if ('character_id' not in local_var_params or
                local_var_params['character_id'] is None):
            raise ValueError("Missing the required parameter `character_id` when calling `get_historical_stats`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'membership_type' in local_var_params:
            path_params['membershipType'] = local_var_params['membership_type']  # noqa: E501
        if 'destiny_membership_id' in local_var_params:
            path_params['destinyMembershipId'] = local_var_params['destiny_membership_id']  # noqa: E501
        if 'character_id' in local_var_params:
            path_params['characterId'] = local_var_params['character_id']  # noqa: E501

        query_params = []
        if 'period_type' in local_var_params:
            query_params.append(('periodType', local_var_params['period_type']))  # noqa: E501
        if 'modes' in local_var_params:
            query_params.append(('modes', local_var_params['modes']))  # noqa: E501
            collection_formats['modes'] = 'multi'  # noqa: E501
        if 'groups' in local_var_params:
            query_params.append(('groups', local_var_params['groups']))  # noqa: E501
            collection_formats['groups'] = 'multi'  # noqa: E501
        if 'monthstart' in local_var_params:
            query_params.append(('monthstart', local_var_params['monthstart']))  # noqa: E501
        if 'monthend' in local_var_params:
            query_params.append(('monthend', local_var_params['monthend']))  # noqa: E501
        if 'daystart' in local_var_params:
            query_params.append(('daystart', local_var_params['daystart']))  # noqa: E501
        if 'dayend' in local_var_params:
            query_params.append(('dayend', local_var_params['dayend']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/Destiny/Stats/{membershipType}/{destinyMembershipId}/{characterId}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_historical_stats_definition(self, **kwargs):  # noqa: E501
        """get_historical_stats_definition  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_historical_stats_definition(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_historical_stats_definition_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_historical_stats_definition_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_historical_stats_definition_with_http_info(self, **kwargs):  # noqa: E501
        """get_historical_stats_definition  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_historical_stats_definition_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_historical_stats_definition" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/Destiny/Stats/Definition/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_historical_stats_for_account(self, membership_type, destiny_membership_id, **kwargs):  # noqa: E501
        """get_historical_stats_for_account  # noqa: E501

        Gets aggregate historical stats organized around each character for a given account.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_historical_stats_for_account(membership_type, destiny_membership_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BungieMembershipType membership_type: The type of account for which info will be extracted. (required)
        :param int destiny_membership_id: Destiny membership ID. (required)
        :param str groups:
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_historical_stats_for_account_with_http_info(membership_type, destiny_membership_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_historical_stats_for_account_with_http_info(membership_type, destiny_membership_id, **kwargs)  # noqa: E501
            return data

    def get_historical_stats_for_account_with_http_info(self, membership_type, destiny_membership_id, **kwargs):  # noqa: E501
        """get_historical_stats_for_account  # noqa: E501

        Gets aggregate historical stats organized around each character for a given account.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_historical_stats_for_account_with_http_info(membership_type, destiny_membership_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BungieMembershipType membership_type: The type of account for which info will be extracted. (required)
        :param int destiny_membership_id: Destiny membership ID. (required)
        :param str groups:
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['membership_type', 'destiny_membership_id', 'groups']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_historical_stats_for_account" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'membership_type' is set
        if ('membership_type' not in local_var_params or
                local_var_params['membership_type'] is None):
            raise ValueError("Missing the required parameter `membership_type` when calling `get_historical_stats_for_account`")  # noqa: E501
        # verify the required parameter 'destiny_membership_id' is set
        if ('destiny_membership_id' not in local_var_params or
                local_var_params['destiny_membership_id'] is None):
            raise ValueError("Missing the required parameter `destiny_membership_id` when calling `get_historical_stats_for_account`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'membership_type' in local_var_params:
            path_params['membershipType'] = local_var_params['membership_type']  # noqa: E501
        if 'destiny_membership_id' in local_var_params:
            path_params['destinyMembershipId'] = local_var_params['destiny_membership_id']  # noqa: E501

        query_params = []
        if 'groups' in local_var_params:
            query_params.append(('groups', local_var_params['groups']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/Destiny/Stats/Account/{membershipType}/{destinyMembershipId}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_item_detail(self, membership_type, destiny_membership_id, character_id, item_instance_id, **kwargs):  # noqa: E501
        """get_item_detail  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_item_detail(membership_type, destiny_membership_id, character_id, item_instance_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BungieMembershipType membership_type: The type of account for which info will be extracted. (required)
        :param int destiny_membership_id: Destiny membership ID. (required)
        :param str character_id: (required)
        :param str item_instance_id: (required)
        :param bool definitions: Include definitions in the response. Use while testing.
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_item_detail_with_http_info(membership_type, destiny_membership_id, character_id, item_instance_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_item_detail_with_http_info(membership_type, destiny_membership_id, character_id, item_instance_id, **kwargs)  # noqa: E501
            return data

    def get_item_detail_with_http_info(self, membership_type, destiny_membership_id, character_id, item_instance_id, **kwargs):  # noqa: E501
        """get_item_detail  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_item_detail_with_http_info(membership_type, destiny_membership_id, character_id, item_instance_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BungieMembershipType membership_type: The type of account for which info will be extracted. (required)
        :param int destiny_membership_id: Destiny membership ID. (required)
        :param str character_id: (required)
        :param str item_instance_id: (required)
        :param bool definitions: Include definitions in the response. Use while testing.
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['membership_type', 'destiny_membership_id', 'character_id', 'item_instance_id', 'definitions']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_item_detail" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'membership_type' is set
        if ('membership_type' not in local_var_params or
                local_var_params['membership_type'] is None):
            raise ValueError("Missing the required parameter `membership_type` when calling `get_item_detail`")  # noqa: E501
        # verify the required parameter 'destiny_membership_id' is set
        if ('destiny_membership_id' not in local_var_params or
                local_var_params['destiny_membership_id'] is None):
            raise ValueError("Missing the required parameter `destiny_membership_id` when calling `get_item_detail`")  # noqa: E501
        # verify the required parameter 'character_id' is set
        if ('character_id' not in local_var_params or
                local_var_params['character_id'] is None):
            raise ValueError("Missing the required parameter `character_id` when calling `get_item_detail`")  # noqa: E501
        # verify the required parameter 'item_instance_id' is set
        if ('item_instance_id' not in local_var_params or
                local_var_params['item_instance_id'] is None):
            raise ValueError("Missing the required parameter `item_instance_id` when calling `get_item_detail`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'membership_type' in local_var_params:
            path_params['membershipType'] = local_var_params['membership_type']  # noqa: E501
        if 'destiny_membership_id' in local_var_params:
            path_params['destinyMembershipId'] = local_var_params['destiny_membership_id']  # noqa: E501
        if 'character_id' in local_var_params:
            path_params['characterId'] = local_var_params['character_id']  # noqa: E501
        if 'item_instance_id' in local_var_params:
            path_params['itemInstanceId'] = local_var_params['item_instance_id']  # noqa: E501

        query_params = []
        if 'definitions' in local_var_params:
            query_params.append(('definitions', local_var_params['definitions']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/Destiny/{membershipType}/Account/{destinyMembershipId}/Character/{characterId}/Inventory/{itemInstanceId}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_item_reference_detail(self, param1, param2, param3, param4, **kwargs):  # noqa: E501
        """get_item_reference_detail  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_item_reference_detail(param1, param2, param3, param4, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str param1: (required)
        :param str param2: (required)
        :param str param3: (required)
        :param str param4: (required)
        :param str definitions:
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_item_reference_detail_with_http_info(param1, param2, param3, param4, **kwargs)  # noqa: E501
        else:
            (data) = self.get_item_reference_detail_with_http_info(param1, param2, param3, param4, **kwargs)  # noqa: E501
            return data

    def get_item_reference_detail_with_http_info(self, param1, param2, param3, param4, **kwargs):  # noqa: E501
        """get_item_reference_detail  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_item_reference_detail_with_http_info(param1, param2, param3, param4, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str param1: (required)
        :param str param2: (required)
        :param str param3: (required)
        :param str param4: (required)
        :param str definitions:
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['param1', 'param2', 'param3', 'param4', 'definitions']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_item_reference_detail" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'param1' is set
        if ('param1' not in local_var_params or
                local_var_params['param1'] is None):
            raise ValueError("Missing the required parameter `param1` when calling `get_item_reference_detail`")  # noqa: E501
        # verify the required parameter 'param2' is set
        if ('param2' not in local_var_params or
                local_var_params['param2'] is None):
            raise ValueError("Missing the required parameter `param2` when calling `get_item_reference_detail`")  # noqa: E501
        # verify the required parameter 'param3' is set
        if ('param3' not in local_var_params or
                local_var_params['param3'] is None):
            raise ValueError("Missing the required parameter `param3` when calling `get_item_reference_detail`")  # noqa: E501
        # verify the required parameter 'param4' is set
        if ('param4' not in local_var_params or
                local_var_params['param4'] is None):
            raise ValueError("Missing the required parameter `param4` when calling `get_item_reference_detail`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'param1' in local_var_params:
            path_params['param1'] = local_var_params['param1']  # noqa: E501
        if 'param2' in local_var_params:
            path_params['param2'] = local_var_params['param2']  # noqa: E501
        if 'param3' in local_var_params:
            path_params['param3'] = local_var_params['param3']  # noqa: E501
        if 'param4' in local_var_params:
            path_params['param4'] = local_var_params['param4']  # noqa: E501

        query_params = []
        if 'definitions' in local_var_params:
            query_params.append(('definitions', local_var_params['definitions']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/Destiny/{param1}/Account/{param2}/Character/{param3}/ItemReference/{param4}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_leaderboards(self, membership_type, destiny_membership_id, **kwargs):  # noqa: E501
        """get_leaderboards  # noqa: E501

        Returns leaderboard stats compared against friends. Note you may need to re-authenticate with PSN/Xbox in order to see full rankings.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_leaderboards(membership_type, destiny_membership_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BungieMembershipType membership_type: The type of account for which info will be extracted. (required)
        :param int destiny_membership_id: Destiny membership ID. (required)
        :param list[ActivityModeType] modes: Game modes to return. Comma separated.
        :param str statid:
        :param str maxtop:
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_leaderboards_with_http_info(membership_type, destiny_membership_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_leaderboards_with_http_info(membership_type, destiny_membership_id, **kwargs)  # noqa: E501
            return data

    def get_leaderboards_with_http_info(self, membership_type, destiny_membership_id, **kwargs):  # noqa: E501
        """get_leaderboards  # noqa: E501

        Returns leaderboard stats compared against friends. Note you may need to re-authenticate with PSN/Xbox in order to see full rankings.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_leaderboards_with_http_info(membership_type, destiny_membership_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BungieMembershipType membership_type: The type of account for which info will be extracted. (required)
        :param int destiny_membership_id: Destiny membership ID. (required)
        :param list[ActivityModeType] modes: Game modes to return. Comma separated.
        :param str statid:
        :param str maxtop:
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['membership_type', 'destiny_membership_id', 'modes', 'statid', 'maxtop']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_leaderboards" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'membership_type' is set
        if ('membership_type' not in local_var_params or
                local_var_params['membership_type'] is None):
            raise ValueError("Missing the required parameter `membership_type` when calling `get_leaderboards`")  # noqa: E501
        # verify the required parameter 'destiny_membership_id' is set
        if ('destiny_membership_id' not in local_var_params or
                local_var_params['destiny_membership_id'] is None):
            raise ValueError("Missing the required parameter `destiny_membership_id` when calling `get_leaderboards`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'membership_type' in local_var_params:
            path_params['membershipType'] = local_var_params['membership_type']  # noqa: E501
        if 'destiny_membership_id' in local_var_params:
            path_params['destinyMembershipId'] = local_var_params['destiny_membership_id']  # noqa: E501

        query_params = []
        if 'modes' in local_var_params:
            query_params.append(('modes', local_var_params['modes']))  # noqa: E501
            collection_formats['modes'] = 'multi'  # noqa: E501
        if 'statid' in local_var_params:
            query_params.append(('statid', local_var_params['statid']))  # noqa: E501
        if 'maxtop' in local_var_params:
            query_params.append(('maxtop', local_var_params['maxtop']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/Destiny/Stats/Leaderboards/{membershipType}/{destinyMembershipId}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_leaderboards_for_character(self, param1, param2, param3, **kwargs):  # noqa: E501
        """get_leaderboards_for_character  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_leaderboards_for_character(param1, param2, param3, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str param1: (required)
        :param str param2: (required)
        :param str param3: (required)
        :param str modes:
        :param str statid:
        :param str maxtop:
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_leaderboards_for_character_with_http_info(param1, param2, param3, **kwargs)  # noqa: E501
        else:
            (data) = self.get_leaderboards_for_character_with_http_info(param1, param2, param3, **kwargs)  # noqa: E501
            return data

    def get_leaderboards_for_character_with_http_info(self, param1, param2, param3, **kwargs):  # noqa: E501
        """get_leaderboards_for_character  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_leaderboards_for_character_with_http_info(param1, param2, param3, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str param1: (required)
        :param str param2: (required)
        :param str param3: (required)
        :param str modes:
        :param str statid:
        :param str maxtop:
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['param1', 'param2', 'param3', 'modes', 'statid', 'maxtop']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_leaderboards_for_character" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'param1' is set
        if ('param1' not in local_var_params or
                local_var_params['param1'] is None):
            raise ValueError("Missing the required parameter `param1` when calling `get_leaderboards_for_character`")  # noqa: E501
        # verify the required parameter 'param2' is set
        if ('param2' not in local_var_params or
                local_var_params['param2'] is None):
            raise ValueError("Missing the required parameter `param2` when calling `get_leaderboards_for_character`")  # noqa: E501
        # verify the required parameter 'param3' is set
        if ('param3' not in local_var_params or
                local_var_params['param3'] is None):
            raise ValueError("Missing the required parameter `param3` when calling `get_leaderboards_for_character`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'param1' in local_var_params:
            path_params['param1'] = local_var_params['param1']  # noqa: E501
        if 'param2' in local_var_params:
            path_params['param2'] = local_var_params['param2']  # noqa: E501
        if 'param3' in local_var_params:
            path_params['param3'] = local_var_params['param3']  # noqa: E501

        query_params = []
        if 'modes' in local_var_params:
            query_params.append(('modes', local_var_params['modes']))  # noqa: E501
        if 'statid' in local_var_params:
            query_params.append(('statid', local_var_params['statid']))  # noqa: E501
        if 'maxtop' in local_var_params:
            query_params.append(('maxtop', local_var_params['maxtop']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/Destiny/Stats/Leaderboards/{param1}/{param2}/{param3}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_leaderboards_for_psn(self, **kwargs):  # noqa: E501
        """get_leaderboards_for_psn  # noqa: E501

        Returns leaderboard stats compared against PSN friends. Note, you may need re-authenticate with PSN in order to see full rankings.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_leaderboards_for_psn(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[ActivityModeType] modes: Game modes to return. Comma separated.
        :param str code:
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_leaderboards_for_psn_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_leaderboards_for_psn_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_leaderboards_for_psn_with_http_info(self, **kwargs):  # noqa: E501
        """get_leaderboards_for_psn  # noqa: E501

        Returns leaderboard stats compared against PSN friends. Note, you may need re-authenticate with PSN in order to see full rankings.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_leaderboards_for_psn_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[ActivityModeType] modes: Game modes to return. Comma separated.
        :param str code:
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['modes', 'code']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_leaderboards_for_psn" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'modes' in local_var_params:
            query_params.append(('modes', local_var_params['modes']))  # noqa: E501
            collection_formats['modes'] = 'multi'  # noqa: E501
        if 'code' in local_var_params:
            query_params.append(('code', local_var_params['code']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/Destiny/Stats/LeaderboardsForPsn/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_membership_id_by_display_name(self, membership_type, display_name, **kwargs):  # noqa: E501
        """get_membership_id_by_display_name  # noqa: E501

        Returns the numerical id of a player based on their display name, zero if not found.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_membership_id_by_display_name(membership_type, display_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BungieMembershipType membership_type: The type of account for which info will be extracted. (required)
        :param str display_name: A valid PSN Id or Gamertag display name. (required)
        :param bool ignorecase: Default is false when not specified. True to cause a caseless search to be used.
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_membership_id_by_display_name_with_http_info(membership_type, display_name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_membership_id_by_display_name_with_http_info(membership_type, display_name, **kwargs)  # noqa: E501
            return data

    def get_membership_id_by_display_name_with_http_info(self, membership_type, display_name, **kwargs):  # noqa: E501
        """get_membership_id_by_display_name  # noqa: E501

        Returns the numerical id of a player based on their display name, zero if not found.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_membership_id_by_display_name_with_http_info(membership_type, display_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BungieMembershipType membership_type: The type of account for which info will be extracted. (required)
        :param str display_name: A valid PSN Id or Gamertag display name. (required)
        :param bool ignorecase: Default is false when not specified. True to cause a caseless search to be used.
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['membership_type', 'display_name', 'ignorecase']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_membership_id_by_display_name" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'membership_type' is set
        if ('membership_type' not in local_var_params or
                local_var_params['membership_type'] is None):
            raise ValueError("Missing the required parameter `membership_type` when calling `get_membership_id_by_display_name`")  # noqa: E501
        # verify the required parameter 'display_name' is set
        if ('display_name' not in local_var_params or
                local_var_params['display_name'] is None):
            raise ValueError("Missing the required parameter `display_name` when calling `get_membership_id_by_display_name`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'membership_type' in local_var_params:
            path_params['membershipType'] = local_var_params['membership_type']  # noqa: E501
        if 'display_name' in local_var_params:
            path_params['displayName'] = local_var_params['display_name']  # noqa: E501

        query_params = []
        if 'ignorecase' in local_var_params:
            query_params.append(('ignorecase', local_var_params['ignorecase']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/Destiny/{membershipType}/Stats/GetMembershipIdByDisplayName/{displayName}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_my_grimoire(self, membership_type, **kwargs):  # noqa: E501
        """get_my_grimoire  # noqa: E501

        Returns the Grimoire for the currently signed in account.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_my_grimoire(membership_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BungieMembershipType membership_type: The type of account for which info will be extracted. (required)
        :param bool definitions: Include definitions in the response. Use while testing.
        :param str flavour: Indicates flavour stats should be included with player card data. More testing needed.
        :param int single: Return data for a single cardId.
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_my_grimoire_with_http_info(membership_type, **kwargs)  # noqa: E501
        else:
            (data) = self.get_my_grimoire_with_http_info(membership_type, **kwargs)  # noqa: E501
            return data

    def get_my_grimoire_with_http_info(self, membership_type, **kwargs):  # noqa: E501
        """get_my_grimoire  # noqa: E501

        Returns the Grimoire for the currently signed in account.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_my_grimoire_with_http_info(membership_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BungieMembershipType membership_type: The type of account for which info will be extracted. (required)
        :param bool definitions: Include definitions in the response. Use while testing.
        :param str flavour: Indicates flavour stats should be included with player card data. More testing needed.
        :param int single: Return data for a single cardId.
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['membership_type', 'definitions', 'flavour', 'single']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_my_grimoire" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'membership_type' is set
        if ('membership_type' not in local_var_params or
                local_var_params['membership_type'] is None):
            raise ValueError("Missing the required parameter `membership_type` when calling `get_my_grimoire`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'membership_type' in local_var_params:
            path_params['membershipType'] = local_var_params['membership_type']  # noqa: E501

        query_params = []
        if 'definitions' in local_var_params:
            query_params.append(('definitions', local_var_params['definitions']))  # noqa: E501
        if 'flavour' in local_var_params:
            query_params.append(('flavour', local_var_params['flavour']))  # noqa: E501
        if 'single' in local_var_params:
            query_params.append(('single', local_var_params['single']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/Destiny/Vanguard/Grimoire/{membershipType}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_post_game_carnage_report(self, activity_instance_id, **kwargs):  # noqa: E501
        """get_post_game_carnage_report  # noqa: E501

        Gets the available post game carnage report for the activity ID.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_post_game_carnage_report(activity_instance_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int activity_instance_id: A valid activityInstanceId. (required)
        :param bool definitions: Include definitions in the response. Use while testing.
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_post_game_carnage_report_with_http_info(activity_instance_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_post_game_carnage_report_with_http_info(activity_instance_id, **kwargs)  # noqa: E501
            return data

    def get_post_game_carnage_report_with_http_info(self, activity_instance_id, **kwargs):  # noqa: E501
        """get_post_game_carnage_report  # noqa: E501

        Gets the available post game carnage report for the activity ID.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_post_game_carnage_report_with_http_info(activity_instance_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int activity_instance_id: A valid activityInstanceId. (required)
        :param bool definitions: Include definitions in the response. Use while testing.
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['activity_instance_id', 'definitions']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_post_game_carnage_report" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'activity_instance_id' is set
        if ('activity_instance_id' not in local_var_params or
                local_var_params['activity_instance_id'] is None):
            raise ValueError("Missing the required parameter `activity_instance_id` when calling `get_post_game_carnage_report`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'activity_instance_id' in local_var_params:
            path_params['activityInstanceId'] = local_var_params['activity_instance_id']  # noqa: E501

        query_params = []
        if 'definitions' in local_var_params:
            query_params.append(('definitions', local_var_params['definitions']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/Destiny/Stats/PostGameCarnageReport/{activityInstanceId}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_public_advisors(self, **kwargs):  # noqa: E501
        """get_public_advisors  # noqa: E501

        Returns information about current daily, weekly and special events.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_public_advisors(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param bool definitions: Include definitions in the response. Use while testing.
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_public_advisors_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_public_advisors_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_public_advisors_with_http_info(self, **kwargs):  # noqa: E501
        """get_public_advisors  # noqa: E501

        Returns information about current daily, weekly and special events.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_public_advisors_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param bool definitions: Include definitions in the response. Use while testing.
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['definitions']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_public_advisors" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'definitions' in local_var_params:
            query_params.append(('definitions', local_var_params['definitions']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/Destiny/Advisors/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_public_advisors_v2(self, **kwargs):  # noqa: E501
        """get_public_advisors_v2  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_public_advisors_v2(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param bool definitions: Include definitions in the response. Use while testing.
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_public_advisors_v2_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_public_advisors_v2_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_public_advisors_v2_with_http_info(self, **kwargs):  # noqa: E501
        """get_public_advisors_v2  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_public_advisors_v2_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param bool definitions: Include definitions in the response. Use while testing.
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['definitions']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_public_advisors_v2" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'definitions' in local_var_params:
            query_params.append(('definitions', local_var_params['definitions']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/Destiny/Advisors/V2/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_public_vendor(self, vendor_hash, **kwargs):  # noqa: E501
        """get_public_vendor  # noqa: E501

        Returns Public information for a given Vendor.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_public_vendor(vendor_hash, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int vendor_hash: A valid vendorHash. (required)
        :param bool definitions: Include definitions in the response. Use while testing.
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_public_vendor_with_http_info(vendor_hash, **kwargs)  # noqa: E501
        else:
            (data) = self.get_public_vendor_with_http_info(vendor_hash, **kwargs)  # noqa: E501
            return data

    def get_public_vendor_with_http_info(self, vendor_hash, **kwargs):  # noqa: E501
        """get_public_vendor  # noqa: E501

        Returns Public information for a given Vendor.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_public_vendor_with_http_info(vendor_hash, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int vendor_hash: A valid vendorHash. (required)
        :param bool definitions: Include definitions in the response. Use while testing.
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['vendor_hash', 'definitions']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_public_vendor" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'vendor_hash' is set
        if ('vendor_hash' not in local_var_params or
                local_var_params['vendor_hash'] is None):
            raise ValueError("Missing the required parameter `vendor_hash` when calling `get_public_vendor`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'vendor_hash' in local_var_params:
            path_params['vendorHash'] = local_var_params['vendor_hash']  # noqa: E501

        query_params = []
        if 'definitions' in local_var_params:
            query_params.append(('definitions', local_var_params['definitions']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/Destiny/Vendors/{vendorHash}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_public_vendor_with_metadata(self, vendor_hash, **kwargs):  # noqa: E501
        """get_public_vendor_with_metadata  # noqa: E501

        Returns Public information for a given Vendor, with metadata.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_public_vendor_with_metadata(vendor_hash, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int vendor_hash: A valid vendorHash. (required)
        :param bool definitions: Include definitions in the response. Use while testing.
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_public_vendor_with_metadata_with_http_info(vendor_hash, **kwargs)  # noqa: E501
        else:
            (data) = self.get_public_vendor_with_metadata_with_http_info(vendor_hash, **kwargs)  # noqa: E501
            return data

    def get_public_vendor_with_metadata_with_http_info(self, vendor_hash, **kwargs):  # noqa: E501
        """get_public_vendor_with_metadata  # noqa: E501

        Returns Public information for a given Vendor, with metadata.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_public_vendor_with_metadata_with_http_info(vendor_hash, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int vendor_hash: A valid vendorHash. (required)
        :param bool definitions: Include definitions in the response. Use while testing.
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['vendor_hash', 'definitions']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_public_vendor_with_metadata" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'vendor_hash' is set
        if ('vendor_hash' not in local_var_params or
                local_var_params['vendor_hash'] is None):
            raise ValueError("Missing the required parameter `vendor_hash` when calling `get_public_vendor_with_metadata`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'vendor_hash' in local_var_params:
            path_params['vendorHash'] = local_var_params['vendor_hash']  # noqa: E501

        query_params = []
        if 'definitions' in local_var_params:
            query_params.append(('definitions', local_var_params['definitions']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/Destiny/Vendors/{vendorHash}/Metadata/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_public_xur_vendor(self, **kwargs):  # noqa: E501
        """get_public_xur_vendor  # noqa: E501

        Returns advisor information about the vendor Xur in Destiny.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_public_xur_vendor(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param bool definitions: Include definitions in the response. Use while testing.
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_public_xur_vendor_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_public_xur_vendor_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_public_xur_vendor_with_http_info(self, **kwargs):  # noqa: E501
        """get_public_xur_vendor  # noqa: E501

        Returns advisor information about the vendor Xur in Destiny.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_public_xur_vendor_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param bool definitions: Include definitions in the response. Use while testing.
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['definitions']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_public_xur_vendor" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'definitions' in local_var_params:
            query_params.append(('definitions', local_var_params['definitions']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/Destiny/Advisors/Xur/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_record_book_completion_status(self, membership_type, record_book_hash, **kwargs):  # noqa: E501
        """get_record_book_completion_status  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_record_book_completion_status(membership_type, record_book_hash, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BungieMembershipType membership_type: The type of account for which info will be extracted. (required)
        :param int record_book_hash: (required)
        :param bool definitions: Include definitions in the response. Use while testing.
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_record_book_completion_status_with_http_info(membership_type, record_book_hash, **kwargs)  # noqa: E501
        else:
            (data) = self.get_record_book_completion_status_with_http_info(membership_type, record_book_hash, **kwargs)  # noqa: E501
            return data

    def get_record_book_completion_status_with_http_info(self, membership_type, record_book_hash, **kwargs):  # noqa: E501
        """get_record_book_completion_status  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_record_book_completion_status_with_http_info(membership_type, record_book_hash, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BungieMembershipType membership_type: The type of account for which info will be extracted. (required)
        :param int record_book_hash: (required)
        :param bool definitions: Include definitions in the response. Use while testing.
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['membership_type', 'record_book_hash', 'definitions']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_record_book_completion_status" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'membership_type' is set
        if ('membership_type' not in local_var_params or
                local_var_params['membership_type'] is None):
            raise ValueError("Missing the required parameter `membership_type` when calling `get_record_book_completion_status`")  # noqa: E501
        # verify the required parameter 'record_book_hash' is set
        if ('record_book_hash' not in local_var_params or
                local_var_params['record_book_hash'] is None):
            raise ValueError("Missing the required parameter `record_book_hash` when calling `get_record_book_completion_status`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'membership_type' in local_var_params:
            path_params['membershipType'] = local_var_params['membership_type']  # noqa: E501
        if 'record_book_hash' in local_var_params:
            path_params['recordBookHash'] = local_var_params['record_book_hash']  # noqa: E501

        query_params = []
        if 'definitions' in local_var_params:
            query_params.append(('definitions', local_var_params['definitions']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/Destiny/{membershipType}/MyAccount/RecordBooks/{recordBookHash}/Completion/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_special_event_advisors(self, **kwargs):  # noqa: E501
        """get_special_event_advisors  # noqa: E501

        Returns a list of currently active events.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_special_event_advisors(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param bool definitions: Include definitions in the response. Use while testing.
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_special_event_advisors_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_special_event_advisors_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_special_event_advisors_with_http_info(self, **kwargs):  # noqa: E501
        """get_special_event_advisors  # noqa: E501

        Returns a list of currently active events.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_special_event_advisors_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param bool definitions: Include definitions in the response. Use while testing.
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['definitions']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_special_event_advisors" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'definitions' in local_var_params:
            query_params.append(('definitions', local_var_params['definitions']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/Destiny/Events/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_triumphs(self, membership_type, destiny_membership_id, **kwargs):  # noqa: E501
        """get_triumphs  # noqa: E501

        Returns a list of triumph sets for a given account.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_triumphs(membership_type, destiny_membership_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BungieMembershipType membership_type: The type of account for which info will be extracted. (required)
        :param int destiny_membership_id: Destiny membership ID. (required)
        :param bool definitions: Include definitions in the response. Use while testing.
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_triumphs_with_http_info(membership_type, destiny_membership_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_triumphs_with_http_info(membership_type, destiny_membership_id, **kwargs)  # noqa: E501
            return data

    def get_triumphs_with_http_info(self, membership_type, destiny_membership_id, **kwargs):  # noqa: E501
        """get_triumphs  # noqa: E501

        Returns a list of triumph sets for a given account.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_triumphs_with_http_info(membership_type, destiny_membership_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BungieMembershipType membership_type: The type of account for which info will be extracted. (required)
        :param int destiny_membership_id: Destiny membership ID. (required)
        :param bool definitions: Include definitions in the response. Use while testing.
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['membership_type', 'destiny_membership_id', 'definitions']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_triumphs" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'membership_type' is set
        if ('membership_type' not in local_var_params or
                local_var_params['membership_type'] is None):
            raise ValueError("Missing the required parameter `membership_type` when calling `get_triumphs`")  # noqa: E501
        # verify the required parameter 'destiny_membership_id' is set
        if ('destiny_membership_id' not in local_var_params or
                local_var_params['destiny_membership_id'] is None):
            raise ValueError("Missing the required parameter `destiny_membership_id` when calling `get_triumphs`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'membership_type' in local_var_params:
            path_params['membershipType'] = local_var_params['membership_type']  # noqa: E501
        if 'destiny_membership_id' in local_var_params:
            path_params['destinyMembershipId'] = local_var_params['destiny_membership_id']  # noqa: E501

        query_params = []
        if 'definitions' in local_var_params:
            query_params.append(('definitions', local_var_params['definitions']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/Destiny/{membershipType}/Account/{destinyMembershipId}/Triumphs/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_unique_weapon_history(self, membership_type, destiny_membership_id, character_id, **kwargs):  # noqa: E501
        """get_unique_weapon_history  # noqa: E501

        Gets details about unique weapon usage, including all exotic weapons.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_unique_weapon_history(membership_type, destiny_membership_id, character_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BungieMembershipType membership_type: The type of account for which info will be extracted. (required)
        :param int destiny_membership_id: Destiny membership ID. (required)
        :param str character_id: (required)
        :param bool definitions: Include definitions in the response. Use while testing.
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_unique_weapon_history_with_http_info(membership_type, destiny_membership_id, character_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_unique_weapon_history_with_http_info(membership_type, destiny_membership_id, character_id, **kwargs)  # noqa: E501
            return data

    def get_unique_weapon_history_with_http_info(self, membership_type, destiny_membership_id, character_id, **kwargs):  # noqa: E501
        """get_unique_weapon_history  # noqa: E501

        Gets details about unique weapon usage, including all exotic weapons.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_unique_weapon_history_with_http_info(membership_type, destiny_membership_id, character_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BungieMembershipType membership_type: The type of account for which info will be extracted. (required)
        :param int destiny_membership_id: Destiny membership ID. (required)
        :param str character_id: (required)
        :param bool definitions: Include definitions in the response. Use while testing.
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['membership_type', 'destiny_membership_id', 'character_id', 'definitions']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_unique_weapon_history" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'membership_type' is set
        if ('membership_type' not in local_var_params or
                local_var_params['membership_type'] is None):
            raise ValueError("Missing the required parameter `membership_type` when calling `get_unique_weapon_history`")  # noqa: E501
        # verify the required parameter 'destiny_membership_id' is set
        if ('destiny_membership_id' not in local_var_params or
                local_var_params['destiny_membership_id'] is None):
            raise ValueError("Missing the required parameter `destiny_membership_id` when calling `get_unique_weapon_history`")  # noqa: E501
        # verify the required parameter 'character_id' is set
        if ('character_id' not in local_var_params or
                local_var_params['character_id'] is None):
            raise ValueError("Missing the required parameter `character_id` when calling `get_unique_weapon_history`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'membership_type' in local_var_params:
            path_params['membershipType'] = local_var_params['membership_type']  # noqa: E501
        if 'destiny_membership_id' in local_var_params:
            path_params['destinyMembershipId'] = local_var_params['destiny_membership_id']  # noqa: E501
        if 'character_id' in local_var_params:
            path_params['characterId'] = local_var_params['character_id']  # noqa: E501

        query_params = []
        if 'definitions' in local_var_params:
            query_params.append(('definitions', local_var_params['definitions']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/Destiny/Stats/UniqueWeapons/{membershipType}/{destinyMembershipId}/{characterId}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_vault(self, membership_type, **kwargs):  # noqa: E501
        """get_vault  # noqa: E501

        Returns the contents of player's Vault.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_vault(membership_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BungieMembershipType membership_type: The type of account for which info will be extracted. (required)
        :param bool definitions: Include definitions in the response. Use while testing.
        :param int account_id: Destiny membership ID.
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_vault_with_http_info(membership_type, **kwargs)  # noqa: E501
        else:
            (data) = self.get_vault_with_http_info(membership_type, **kwargs)  # noqa: E501
            return data

    def get_vault_with_http_info(self, membership_type, **kwargs):  # noqa: E501
        """get_vault  # noqa: E501

        Returns the contents of player's Vault.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_vault_with_http_info(membership_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BungieMembershipType membership_type: The type of account for which info will be extracted. (required)
        :param bool definitions: Include definitions in the response. Use while testing.
        :param int account_id: Destiny membership ID.
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['membership_type', 'definitions', 'account_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_vault" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'membership_type' is set
        if ('membership_type' not in local_var_params or
                local_var_params['membership_type'] is None):
            raise ValueError("Missing the required parameter `membership_type` when calling `get_vault`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'membership_type' in local_var_params:
            path_params['membershipType'] = local_var_params['membership_type']  # noqa: E501

        query_params = []
        if 'definitions' in local_var_params:
            query_params.append(('definitions', local_var_params['definitions']))  # noqa: E501
        if 'account_id' in local_var_params:
            query_params.append(('accountId', local_var_params['account_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/Destiny/{membershipType}/MyAccount/Vault/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_vault_summary(self, membership_type, **kwargs):  # noqa: E501
        """get_vault_summary  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_vault_summary(membership_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BungieMembershipType membership_type: The type of account for which info will be extracted. (required)
        :param bool definitions: Include definitions in the response. Use while testing.
        :param int account_id: Destiny membership ID.
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_vault_summary_with_http_info(membership_type, **kwargs)  # noqa: E501
        else:
            (data) = self.get_vault_summary_with_http_info(membership_type, **kwargs)  # noqa: E501
            return data

    def get_vault_summary_with_http_info(self, membership_type, **kwargs):  # noqa: E501
        """get_vault_summary  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_vault_summary_with_http_info(membership_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BungieMembershipType membership_type: The type of account for which info will be extracted. (required)
        :param bool definitions: Include definitions in the response. Use while testing.
        :param int account_id: Destiny membership ID.
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['membership_type', 'definitions', 'account_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_vault_summary" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'membership_type' is set
        if ('membership_type' not in local_var_params or
                local_var_params['membership_type'] is None):
            raise ValueError("Missing the required parameter `membership_type` when calling `get_vault_summary`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'membership_type' in local_var_params:
            path_params['membershipType'] = local_var_params['membership_type']  # noqa: E501

        query_params = []
        if 'definitions' in local_var_params:
            query_params.append(('definitions', local_var_params['definitions']))  # noqa: E501
        if 'account_id' in local_var_params:
            query_params.append(('accountId', local_var_params['account_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/Destiny/{membershipType}/MyAccount/Vault/Summary/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_vendor_for_current_character(self, membership_type, character_id, vendor_hash, **kwargs):  # noqa: E501
        """get_vendor_for_current_character  # noqa: E501

        Returns information about a Vendor for a given Destiny character.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_vendor_for_current_character(membership_type, character_id, vendor_hash, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BungieMembershipType membership_type: The type of account for which info will be extracted. (required)
        :param str character_id: (required)
        :param int vendor_hash: A valid vendorHash. (required)
        :param bool definitions: Include definitions in the response. Use while testing.
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_vendor_for_current_character_with_http_info(membership_type, character_id, vendor_hash, **kwargs)  # noqa: E501
        else:
            (data) = self.get_vendor_for_current_character_with_http_info(membership_type, character_id, vendor_hash, **kwargs)  # noqa: E501
            return data

    def get_vendor_for_current_character_with_http_info(self, membership_type, character_id, vendor_hash, **kwargs):  # noqa: E501
        """get_vendor_for_current_character  # noqa: E501

        Returns information about a Vendor for a given Destiny character.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_vendor_for_current_character_with_http_info(membership_type, character_id, vendor_hash, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BungieMembershipType membership_type: The type of account for which info will be extracted. (required)
        :param str character_id: (required)
        :param int vendor_hash: A valid vendorHash. (required)
        :param bool definitions: Include definitions in the response. Use while testing.
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['membership_type', 'character_id', 'vendor_hash', 'definitions']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_vendor_for_current_character" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'membership_type' is set
        if ('membership_type' not in local_var_params or
                local_var_params['membership_type'] is None):
            raise ValueError("Missing the required parameter `membership_type` when calling `get_vendor_for_current_character`")  # noqa: E501
        # verify the required parameter 'character_id' is set
        if ('character_id' not in local_var_params or
                local_var_params['character_id'] is None):
            raise ValueError("Missing the required parameter `character_id` when calling `get_vendor_for_current_character`")  # noqa: E501
        # verify the required parameter 'vendor_hash' is set
        if ('vendor_hash' not in local_var_params or
                local_var_params['vendor_hash'] is None):
            raise ValueError("Missing the required parameter `vendor_hash` when calling `get_vendor_for_current_character`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'membership_type' in local_var_params:
            path_params['membershipType'] = local_var_params['membership_type']  # noqa: E501
        if 'character_id' in local_var_params:
            path_params['characterId'] = local_var_params['character_id']  # noqa: E501
        if 'vendor_hash' in local_var_params:
            path_params['vendorHash'] = local_var_params['vendor_hash']  # noqa: E501

        query_params = []
        if 'definitions' in local_var_params:
            query_params.append(('definitions', local_var_params['definitions']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/Destiny/{membershipType}/MyAccount/Character/{characterId}/Vendor/{vendorHash}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_vendor_for_current_character_with_metadata(self, membership_type, character_id, vendor_hash, **kwargs):  # noqa: E501
        """get_vendor_for_current_character_with_metadata  # noqa: E501

        Returns information about a Vendor for a given Destiny character with metadata.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_vendor_for_current_character_with_metadata(membership_type, character_id, vendor_hash, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BungieMembershipType membership_type: The type of account for which info will be extracted. (required)
        :param str character_id: (required)
        :param int vendor_hash: A valid vendorHash. (required)
        :param bool definitions: Include definitions in the response. Use while testing.
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_vendor_for_current_character_with_metadata_with_http_info(membership_type, character_id, vendor_hash, **kwargs)  # noqa: E501
        else:
            (data) = self.get_vendor_for_current_character_with_metadata_with_http_info(membership_type, character_id, vendor_hash, **kwargs)  # noqa: E501
            return data

    def get_vendor_for_current_character_with_metadata_with_http_info(self, membership_type, character_id, vendor_hash, **kwargs):  # noqa: E501
        """get_vendor_for_current_character_with_metadata  # noqa: E501

        Returns information about a Vendor for a given Destiny character with metadata.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_vendor_for_current_character_with_metadata_with_http_info(membership_type, character_id, vendor_hash, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BungieMembershipType membership_type: The type of account for which info will be extracted. (required)
        :param str character_id: (required)
        :param int vendor_hash: A valid vendorHash. (required)
        :param bool definitions: Include definitions in the response. Use while testing.
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['membership_type', 'character_id', 'vendor_hash', 'definitions']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_vendor_for_current_character_with_metadata" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'membership_type' is set
        if ('membership_type' not in local_var_params or
                local_var_params['membership_type'] is None):
            raise ValueError("Missing the required parameter `membership_type` when calling `get_vendor_for_current_character_with_metadata`")  # noqa: E501
        # verify the required parameter 'character_id' is set
        if ('character_id' not in local_var_params or
                local_var_params['character_id'] is None):
            raise ValueError("Missing the required parameter `character_id` when calling `get_vendor_for_current_character_with_metadata`")  # noqa: E501
        # verify the required parameter 'vendor_hash' is set
        if ('vendor_hash' not in local_var_params or
                local_var_params['vendor_hash'] is None):
            raise ValueError("Missing the required parameter `vendor_hash` when calling `get_vendor_for_current_character_with_metadata`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'membership_type' in local_var_params:
            path_params['membershipType'] = local_var_params['membership_type']  # noqa: E501
        if 'character_id' in local_var_params:
            path_params['characterId'] = local_var_params['character_id']  # noqa: E501
        if 'vendor_hash' in local_var_params:
            path_params['vendorHash'] = local_var_params['vendor_hash']  # noqa: E501

        query_params = []
        if 'definitions' in local_var_params:
            query_params.append(('definitions', local_var_params['definitions']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/Destiny/{membershipType}/MyAccount/Character/{characterId}/Vendor/{vendorHash}/Metadata/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_vendor_item_detail_for_current_character(self, membership_type, character_id, vendor_hash, vendor_item_id, **kwargs):  # noqa: E501
        """get_vendor_item_detail_for_current_character  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_vendor_item_detail_for_current_character(membership_type, character_id, vendor_hash, vendor_item_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BungieMembershipType membership_type: The type of account for which info will be extracted. (required)
        :param str character_id: (required)
        :param int vendor_hash: A valid vendorHash. (required)
        :param int vendor_item_id: A valid vendorItemIndex see [[GetVendorForCurrentCharacter]]. (required)
        :param bool definitions: Include definitions in the response. Use while testing.
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_vendor_item_detail_for_current_character_with_http_info(membership_type, character_id, vendor_hash, vendor_item_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_vendor_item_detail_for_current_character_with_http_info(membership_type, character_id, vendor_hash, vendor_item_id, **kwargs)  # noqa: E501
            return data

    def get_vendor_item_detail_for_current_character_with_http_info(self, membership_type, character_id, vendor_hash, vendor_item_id, **kwargs):  # noqa: E501
        """get_vendor_item_detail_for_current_character  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_vendor_item_detail_for_current_character_with_http_info(membership_type, character_id, vendor_hash, vendor_item_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BungieMembershipType membership_type: The type of account for which info will be extracted. (required)
        :param str character_id: (required)
        :param int vendor_hash: A valid vendorHash. (required)
        :param int vendor_item_id: A valid vendorItemIndex see [[GetVendorForCurrentCharacter]]. (required)
        :param bool definitions: Include definitions in the response. Use while testing.
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['membership_type', 'character_id', 'vendor_hash', 'vendor_item_id', 'definitions']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_vendor_item_detail_for_current_character" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'membership_type' is set
        if ('membership_type' not in local_var_params or
                local_var_params['membership_type'] is None):
            raise ValueError("Missing the required parameter `membership_type` when calling `get_vendor_item_detail_for_current_character`")  # noqa: E501
        # verify the required parameter 'character_id' is set
        if ('character_id' not in local_var_params or
                local_var_params['character_id'] is None):
            raise ValueError("Missing the required parameter `character_id` when calling `get_vendor_item_detail_for_current_character`")  # noqa: E501
        # verify the required parameter 'vendor_hash' is set
        if ('vendor_hash' not in local_var_params or
                local_var_params['vendor_hash'] is None):
            raise ValueError("Missing the required parameter `vendor_hash` when calling `get_vendor_item_detail_for_current_character`")  # noqa: E501
        # verify the required parameter 'vendor_item_id' is set
        if ('vendor_item_id' not in local_var_params or
                local_var_params['vendor_item_id'] is None):
            raise ValueError("Missing the required parameter `vendor_item_id` when calling `get_vendor_item_detail_for_current_character`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'membership_type' in local_var_params:
            path_params['membershipType'] = local_var_params['membership_type']  # noqa: E501
        if 'character_id' in local_var_params:
            path_params['characterId'] = local_var_params['character_id']  # noqa: E501
        if 'vendor_hash' in local_var_params:
            path_params['vendorHash'] = local_var_params['vendor_hash']  # noqa: E501
        if 'vendor_item_id' in local_var_params:
            path_params['vendorItemId'] = local_var_params['vendor_item_id']  # noqa: E501

        query_params = []
        if 'definitions' in local_var_params:
            query_params.append(('definitions', local_var_params['definitions']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/Destiny/{membershipType}/MyAccount/Character/{characterId}/Vendor/{vendorHash}/Item/{vendorItemId}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_vendor_item_detail_for_current_character_with_metadata(self, membership_type, character_id, vendor_hash, vendor_item_id, **kwargs):  # noqa: E501
        """get_vendor_item_detail_for_current_character_with_metadata  # noqa: E501

        Returns an item from a Vendor's inventory for a given character with metadata.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_vendor_item_detail_for_current_character_with_metadata(membership_type, character_id, vendor_hash, vendor_item_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BungieMembershipType membership_type: The type of account for which info will be extracted. (required)
        :param str character_id: (required)
        :param int vendor_hash: A valid vendorHash. (required)
        :param int vendor_item_id: A valid vendorItemIndex see [[GetVendorForCurrentCharacter]]. (required)
        :param bool definitions: Include definitions in the response. Use while testing.
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_vendor_item_detail_for_current_character_with_metadata_with_http_info(membership_type, character_id, vendor_hash, vendor_item_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_vendor_item_detail_for_current_character_with_metadata_with_http_info(membership_type, character_id, vendor_hash, vendor_item_id, **kwargs)  # noqa: E501
            return data

    def get_vendor_item_detail_for_current_character_with_metadata_with_http_info(self, membership_type, character_id, vendor_hash, vendor_item_id, **kwargs):  # noqa: E501
        """get_vendor_item_detail_for_current_character_with_metadata  # noqa: E501

        Returns an item from a Vendor's inventory for a given character with metadata.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_vendor_item_detail_for_current_character_with_metadata_with_http_info(membership_type, character_id, vendor_hash, vendor_item_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BungieMembershipType membership_type: The type of account for which info will be extracted. (required)
        :param str character_id: (required)
        :param int vendor_hash: A valid vendorHash. (required)
        :param int vendor_item_id: A valid vendorItemIndex see [[GetVendorForCurrentCharacter]]. (required)
        :param bool definitions: Include definitions in the response. Use while testing.
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['membership_type', 'character_id', 'vendor_hash', 'vendor_item_id', 'definitions']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_vendor_item_detail_for_current_character_with_metadata" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'membership_type' is set
        if ('membership_type' not in local_var_params or
                local_var_params['membership_type'] is None):
            raise ValueError("Missing the required parameter `membership_type` when calling `get_vendor_item_detail_for_current_character_with_metadata`")  # noqa: E501
        # verify the required parameter 'character_id' is set
        if ('character_id' not in local_var_params or
                local_var_params['character_id'] is None):
            raise ValueError("Missing the required parameter `character_id` when calling `get_vendor_item_detail_for_current_character_with_metadata`")  # noqa: E501
        # verify the required parameter 'vendor_hash' is set
        if ('vendor_hash' not in local_var_params or
                local_var_params['vendor_hash'] is None):
            raise ValueError("Missing the required parameter `vendor_hash` when calling `get_vendor_item_detail_for_current_character_with_metadata`")  # noqa: E501
        # verify the required parameter 'vendor_item_id' is set
        if ('vendor_item_id' not in local_var_params or
                local_var_params['vendor_item_id'] is None):
            raise ValueError("Missing the required parameter `vendor_item_id` when calling `get_vendor_item_detail_for_current_character_with_metadata`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'membership_type' in local_var_params:
            path_params['membershipType'] = local_var_params['membership_type']  # noqa: E501
        if 'character_id' in local_var_params:
            path_params['characterId'] = local_var_params['character_id']  # noqa: E501
        if 'vendor_hash' in local_var_params:
            path_params['vendorHash'] = local_var_params['vendor_hash']  # noqa: E501
        if 'vendor_item_id' in local_var_params:
            path_params['vendorItemId'] = local_var_params['vendor_item_id']  # noqa: E501

        query_params = []
        if 'definitions' in local_var_params:
            query_params.append(('definitions', local_var_params['definitions']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/Destiny/{membershipType}/MyAccount/Character/{characterId}/Vendor/{vendorHash}/Item/{vendorItemId}/Metadata/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_vendor_summaries_for_current_character(self, membership_type, character_id, **kwargs):  # noqa: E501
        """get_vendor_summaries_for_current_character  # noqa: E501

        Returns a summary of Vendors for a given Destiny character.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_vendor_summaries_for_current_character(membership_type, character_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BungieMembershipType membership_type: The type of account for which info will be extracted. (required)
        :param str character_id: (required)
        :param bool definitions: Include definitions in the response. Use while testing.
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_vendor_summaries_for_current_character_with_http_info(membership_type, character_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_vendor_summaries_for_current_character_with_http_info(membership_type, character_id, **kwargs)  # noqa: E501
            return data

    def get_vendor_summaries_for_current_character_with_http_info(self, membership_type, character_id, **kwargs):  # noqa: E501
        """get_vendor_summaries_for_current_character  # noqa: E501

        Returns a summary of Vendors for a given Destiny character.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_vendor_summaries_for_current_character_with_http_info(membership_type, character_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BungieMembershipType membership_type: The type of account for which info will be extracted. (required)
        :param str character_id: (required)
        :param bool definitions: Include definitions in the response. Use while testing.
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['membership_type', 'character_id', 'definitions']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_vendor_summaries_for_current_character" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'membership_type' is set
        if ('membership_type' not in local_var_params or
                local_var_params['membership_type'] is None):
            raise ValueError("Missing the required parameter `membership_type` when calling `get_vendor_summaries_for_current_character`")  # noqa: E501
        # verify the required parameter 'character_id' is set
        if ('character_id' not in local_var_params or
                local_var_params['character_id'] is None):
            raise ValueError("Missing the required parameter `character_id` when calling `get_vendor_summaries_for_current_character`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'membership_type' in local_var_params:
            path_params['membershipType'] = local_var_params['membership_type']  # noqa: E501
        if 'character_id' in local_var_params:
            path_params['characterId'] = local_var_params['character_id']  # noqa: E501

        query_params = []
        if 'definitions' in local_var_params:
            query_params.append(('definitions', local_var_params['definitions']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/Destiny/{membershipType}/MyAccount/Character/{characterId}/Vendors/Summaries/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def search_destiny_player(self, membership_type, display_name, **kwargs):  # noqa: E501
        """search_destiny_player  # noqa: E501

        Returns a list of players by username and platform.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.search_destiny_player(membership_type, display_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BungieMembershipType membership_type: The type of account for which info will be extracted. (required)
        :param str display_name: A valid display name to search for. (required)
        :return: InlineResponse2002
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.search_destiny_player_with_http_info(membership_type, display_name, **kwargs)  # noqa: E501
        else:
            (data) = self.search_destiny_player_with_http_info(membership_type, display_name, **kwargs)  # noqa: E501
            return data

    def search_destiny_player_with_http_info(self, membership_type, display_name, **kwargs):  # noqa: E501
        """search_destiny_player  # noqa: E501

        Returns a list of players by username and platform.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.search_destiny_player_with_http_info(membership_type, display_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BungieMembershipType membership_type: The type of account for which info will be extracted. (required)
        :param str display_name: A valid display name to search for. (required)
        :return: InlineResponse2002
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['membership_type', 'display_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method search_destiny_player" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'membership_type' is set
        if ('membership_type' not in local_var_params or
                local_var_params['membership_type'] is None):
            raise ValueError("Missing the required parameter `membership_type` when calling `search_destiny_player`")  # noqa: E501
        # verify the required parameter 'display_name' is set
        if ('display_name' not in local_var_params or
                local_var_params['display_name'] is None):
            raise ValueError("Missing the required parameter `display_name` when calling `search_destiny_player`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'membership_type' in local_var_params:
            path_params['membershipType'] = local_var_params['membership_type']  # noqa: E501
        if 'display_name' in local_var_params:
            path_params['displayName'] = local_var_params['display_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/Destiny/SearchDestinyPlayer/{membershipType}/{displayName}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2002',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def set_item_lock_state(self, **kwargs):  # noqa: E501
        """set_item_lock_state  # noqa: E501

        Changes the lock state on an equipable item.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.set_item_lock_state(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param inline_object_3 inline_object3:
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.set_item_lock_state_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.set_item_lock_state_with_http_info(**kwargs)  # noqa: E501
            return data

    def set_item_lock_state_with_http_info(self, **kwargs):  # noqa: E501
        """set_item_lock_state  # noqa: E501

        Changes the lock state on an equipable item.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.set_item_lock_state_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param inline_object_3 inline_object3:
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['inline_object3']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method set_item_lock_state" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'inline_object3' in local_var_params:
            body_params = local_var_params['inline_object3']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/Destiny/SetLockState/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def set_quest_tracked_state(self, **kwargs):  # noqa: E501
        """set_quest_tracked_state  # noqa: E501

        Set the track state of a given quest.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.set_quest_tracked_state(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param inline_object_4 inline_object4:
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.set_quest_tracked_state_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.set_quest_tracked_state_with_http_info(**kwargs)  # noqa: E501
            return data

    def set_quest_tracked_state_with_http_info(self, **kwargs):  # noqa: E501
        """set_quest_tracked_state  # noqa: E501

        Set the track state of a given quest.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.set_quest_tracked_state_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param inline_object_4 inline_object4:
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['inline_object4']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method set_quest_tracked_state" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'inline_object4' in local_var_params:
            body_params = local_var_params['inline_object4']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/Destiny/SetQuestTrackedState/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def transfer_item(self, **kwargs):  # noqa: E501
        """transfer_item  # noqa: E501

        Moves items to and from a character and the vault.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.transfer_item(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param inline_object inline_object:
        :return: InlineResponse2004
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.transfer_item_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.transfer_item_with_http_info(**kwargs)  # noqa: E501
            return data

    def transfer_item_with_http_info(self, **kwargs):  # noqa: E501
        """transfer_item  # noqa: E501

        Moves items to and from a character and the vault.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.transfer_item_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param inline_object inline_object:
        :return: InlineResponse2004
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['inline_object']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method transfer_item" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'inline_object' in local_var_params:
            body_params = local_var_params['inline_object']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/Destiny/TransferItem/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2004',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)
